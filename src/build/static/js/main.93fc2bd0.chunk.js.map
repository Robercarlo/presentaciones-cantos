{"version":3,"sources":["images/Logo-Coronado.svg","TopNav.js","images/youtube_logo.svg","images/facebook_logo.svg","Footer.js","images/penta1.svg","pages/HomePage.js","components/HimnosLista.js","components/PresentacionLista.js","components/VistaHimno.js","images/engranajes.svg","images/bg.jpg","images/oraciones.jpg","images/bienvenida.jpg","images/anuncios.jpg","components/OtrosElementosLista.js","pages/CrearPage.js","components/BusquedaLista.js","components/EstrofasModificables.js","images/agregar_image.svg","pages/AgregarPage.js","images/edit_image.svg","pages/ModificarPage.js","pages/NotFoundPage.js","App.js","reportWebVitals.js","index.js"],"names":["TopNav","state","isActive","handleToggle","setState","this","Fragment","className","id","onClick","src","mainLogo","alt","to","exact","Component","Footer","youtube_logo","window","open","facebook_logo","HomePage","refColumns","useRef","penta1","current","scrollIntoView","behavior","ref","HimnosLista","props","numberOfPages","Math","ceil","himnos","length","useState","pageNumber","setPageNumber","useEffect","map","himno","index","selected","Titulo","verHimno","Id","agregarHimno","console","log","PresentacionLista","presentacion","key","tipo","bajarHimno","subirHimno","eliminarHimno","VistaHimno","titulo","Himno_Id","Numero_estrofa","Contenido","estrofas","setEstrofas","loading","setLoading","a","fetch","method","headers","result","json","body","fetchData","estrofa","contenido","replace","dangerouslySetInnerHTML","__html","type","color","height","width","OtrosElementosLista","forwardRef","otrosElementos","elemento","agregarElemento","url","CrearPage","refContainer","refBorrarTermino","otrosButton","refOtrosElementos","createRef","busqueda","setBusqueda","Cantidad_estrofas","setHimnos","setTitulo","setID","buscarContenido","setBuscarContenido","bienvenida","anuncios","setOtrosElementos","setPresentacion","compararListas","lista","forEach","fila","himnoIndex","findIndex","toggleView","event","target","classList","toggle","contains","remove","engranajes","onSubmit","preventDefault","estrofasId","Set","then","response","data","i","add","idArray","Array","from","alert","catch","error","name","placeholder","value","onChange","termino","isChecked","checked","selected_id","selected_titulo","selectedHimnoIndex","himnosCopy","updatedHimno","newHimno","updatedPresentacion","concat","nuevaPresentacion","pptxgen","author","subject","title","fetchArray","push","Promise","all","responses","contenidoHimnos","himnosIndex","slide","addSlide","background","path","oracionesBg","addText","x","y","h","w","fontSize","bold","align","AlignH","center","estrofaBg","left","estrofaFontSize","cantidadLineas","split","isTextBox","shrinkText","autofit","writeFile","fileName","elementsCopy","selectedElementIndex","updatedElement","selected_tipo","selected_url","newElement","currentObject","filter","object","splice","BusquedaLista","cerrarOverlay","desplegarEstrofas","EstrofasModificables","refEstrofas","keyPressed","numberOfLines","match","which","focusTextarea","textarea","getElementsByTagName","focus","maxLength","onKeyPress","maxRows","cols","e","updateEstrofa","handleChange","borrarEstrofa","AgregarPage","refBusquedaRes","refOverlay","refRelleno","usePopup","message","confirm","cancel","style","display","guardarCanto","himnoData","cantidad","JSON","stringify","himnoId","insertId","insertarData","numero","allSettled","results","innerHTML","agregar_image","estrofasCopy","numero_estrofa","currentEstrofa","estrofaIndex","updated","ModificarPage","selectedHimno","setSelectedHimno","guardar","modificarSelectedHimno","propiedades","valor","selectedHimnoCopy","propiedad","eliminarCanto","borrarData","actualizarHimno","estrofaData","borrarCantidad","nuevaCantidad","insertarCantidad","edit_image","NotFoundPage","App","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.93fc2bd0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Logo-Coronado.e500f9a1.svg\";","import React, { Component } from \"react\";\nimport { NavLink } from 'react-router-dom';\nimport mainLogo from './images/Logo-Coronado.svg';\n\nclass TopNav extends Component {\n\n    state = { isActive: false };\n\n    handleToggle = () => {\n        this.setState({ isActive: !this.state.isActive });\n    };\n\n    render() {\n        const isActive = this.state.isActive;\n        return (\n\n            <React.Fragment>\n                <div className=\"topBar\"><div id=\"menu-bars\" onClick={this.handleToggle}></div></div>\n                <nav className=\"no-mobile\">\n                    <div className=\"no-mobile-container\">\n                        <img className=\"logo\" src={mainLogo} alt=\"Logo Iglesia de Cristo en Coronado\" />\n                        <ul>\n                            <li>\n                                <NavLink to=\"/\" exact>\n                                    Inicio\n                                    <div className=\"active-line\"></div>\n                                </NavLink>\n                            </li>\n                            <li>\n                                <NavLink to=\"/crear\">\n                                    Crear\n                                    <div className=\"active-line\"></div>\n                                </NavLink>\n                            </li>\n                            <li>\n                                <NavLink to=\"/agregar\">\n                                    Agregar\n                                    <div className=\"active-line\"></div>\n                                </NavLink>\n                            </li>\n                            <li>\n                                <NavLink to=\"/modificar\">\n                                    Modificar\n                                    <div className=\"active-line\"></div>\n                                </NavLink>\n                            </li>\n                        </ul>\n                    </div>\n                </nav>\n                <nav className=\"navMobile\">\n                    <ul className={isActive ? \"active\" : \"\"}>\n                        <li>\n                            <NavLink to=\"/\" exact onClick={this.handleToggle}>\n                                Inicio\n                            </NavLink>\n                        </li>\n                        <li>\n                            <NavLink to=\"/crear\" onClick={this.handleToggle}>\n                                Crear\n                            </NavLink>\n                        </li>\n                        <li>\n                            <NavLink to=\"/agregar\" onClick={this.handleToggle}>\n                                Agregar\n                            </NavLink>\n                        </li>\n                        <li>\n                            <NavLink to=\"/modificar\" onClick={this.handleToggle}>\n                                Modificar\n                            </NavLink>\n                        </li>\n                    </ul>\n                    <img className=\"logo\" src={mainLogo} alt=\"Logo Iglesia de Cristo en Coronado\" />\n                </nav>\n            </React.Fragment>  \n        );\n    } \n}\n\nexport default TopNav;","export default __webpack_public_path__ + \"static/media/youtube_logo.88cd0fb3.svg\";","export default __webpack_public_path__ + \"static/media/facebook_logo.093b74e6.svg\";","import React, { Component } from \"react\";\nimport youtube_logo from './images/youtube_logo.svg';\nimport facebook_logo from './images/facebook_logo.svg';\n\nclass Footer extends Component {\n\n    render() {\n        return (\n            <React.Fragment>\n                <footer>\n                    <p>Iglesia de Cristo en Coronado, Costa Rica.</p>\n                    <img id=\"youtube_logo\" className=\"footer_logo\" src={youtube_logo} alt=\"Logo de Youtube\" onClick={()=> window.open(\"https://www.youtube.com/channel/UCqIKSj2WYN4mEgRKVZ-6Zow\", \"_blank\")}/>\n                    <img id=\"facebook_logo\" className=\"footer_logo\" src={facebook_logo} alt=\"Logo de Facebook\" onClick={()=> window.open(\"https://www.facebook.com/iglesiadecristo.coronado\", \"_blank\")}/>\n                </footer>\n            </React.Fragment>  \n        );\n    } \n}\n\nexport default Footer;","export default __webpack_public_path__ + \"static/media/penta1.ef60e11f.svg\";","import React, {useRef} from 'react';\nimport penta1 from '../images/penta1.svg';\nconst HomePage = () => {\n    const refColumns = useRef();\n    return(\n        <React.Fragment>\n            <main id=\"inicio\" className=\"mainContainer\">\n                <header>\n                    <div className=\"inicio-header\">\n                        <img id=\"penta1\" src={penta1} alt=\"imagen pentagrama y notas musicales\" />\n                        <h1>CREACIÓN DE PRESENTACIONES DE CANTOS</h1>\n                        <h3>¡Ahórrese horas de trabajo, termine en unos cuantos clicks!</h3>\n                    </div>\n                </header>\n                <div className=\"linea-divisoria\"></div>\n                <div id=\"abajo-inicio\" className=\"mas-abajo\" onClick={() => {refColumns.current.scrollIntoView({behavior: 'smooth'}); }}></div>\n                <div className=\"columnsContainer\" ref={refColumns}>\n                    <div className=\"column column1\">\n                        <section>\n                            <h2>Cientos de cantos disponibles</h2>\n                            <p>Se han agregado muchos cantos de diferentes himnarios y muchos cantos nuevos que se han aprendido aprendido a lo largo del tiempo.<br/>Con esta herramienta se puede elegir en una larga lista y crear presentaciones fácilmente en un instante.</p>\n                        </section>\n                        <section>\n                            <h2>Agregar cantos nuevos</h2>\n                            <p>Si no se encuentra algún canto existe la posibilidad de agregarlo, una vez agregado un canto este estará disponible para todos los usuarios que quieran utilizarlo en sus presentaciones.</p>\n                        </section>\n                    </div>\n                    <div className=\"column column2\">\n                        <section>\n                            <h2>Modificar cantos existentes</h2>\n                            <p>Muchas veces quienes agregamos cantos nos equivocamos pero para esos errores que encontremos también está la posibilidad de modificar cualquier canto existente.</p>\n                            <div id=\"penta2\"></div>\n                        </section>\n                    </div>\n                </div>\n            </main>\n        </React.Fragment>  \n    ); \n}\n\nexport default HomePage;","import React, { useState, useEffect } from 'react';\n\nconst HimnosLista = (props) => {\n    const maxPerPage = 16;\n    const numberOfPages = Math.ceil(props.himnos.length / maxPerPage);\n    const [pageNumber, setPageNumber] = useState(1);\n\n\n    const next = () => {\n        console.log('next');\n        if(pageNumber < numberOfPages){\n            setPageNumber(pageNumber + 1);\n        }\n    }\n\n    const prev = () => {\n        console.log('prev');\n        if(pageNumber > 1){\n            setPageNumber(pageNumber - 1);\n        }\n    }\n\n    useEffect(() => {\n        setPageNumber(1);\n    }, [numberOfPages])\n\n    return(\n        <>\n            <div id=\"lista-cantos\">\n                {props.himnos.map((himno, index) => {\n                    if(index >= (maxPerPage * pageNumber - maxPerPage) && index < (maxPerPage * pageNumber)){\n                        return(\n                            <div className={\"titulo-container\" + ((himno.selected)? \" titulo-selected\" : \"\")} key={index}>\n                                <div className=\"titulo\">\n                                    <h4>{himno.Titulo}</h4>\n                                </div>\n                                <div className=\"iconos\">\n                                    <i className=\"icono icono-ver\" onClick={() => props.verHimno(himno.Id,himno.Titulo)}></i>\n                                    <i className={\"icono icono-agregar\" + ((himno.selected)? \" icono-selected\" : \"\")} onClick={() => props.agregarHimno(himno.Id,himno.Titulo)}></i>\n                                </div>\n                            </div>\n                        )\n                    } else {\n                        return(<div key={index}></div>);\n                    }\n                })}\n                <div id=\"paginas\">\n                    <div id=\"flecha-anterior\" ><i className=\"icono icono-abajo\" onClick={prev}></i></div><h3>Página {pageNumber}/{numberOfPages}</h3><div id=\"flecha-siguiente\"><i className=\"icono icono-abajo\" onClick={next}></i></div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default HimnosLista;","import React from 'react';\n\nconst PresentacionLista = (props) => {\n\n    return(\n        <>\n        <div id=\"presentacion-cantos\">\n        {props.presentacion.map((himno, key) => (\n            <div className={\"titulo-container\" + ((himno.tipo)? \" \"+himno.tipo : \"\")} key={key}>\n                <div className=\"titulo\">\n                    <h4>{himno.Titulo}</h4>\n                </div>\n                <div className=\"iconos\">\n                    <i className=\"icono icono-abajo\" onClick={() => props.bajarHimno(himno.Id)}></i>\n                    <i className=\"icono icono-arriba\" onClick={() => props.subirHimno(himno.Id)}></i>\n                    <i className=\"icono icono-cerrar\" onClick={() => props.eliminarHimno(himno.Id)}></i>\n                </div>\n            </div>\n        ))}\n        </div>\n        </>\n    );\n};\n\nexport default PresentacionLista;","import React, { useState, useEffect} from 'react';\nimport Loader from \"react-loader-spinner\";\n\nconst VistaHimno = ({ titulo, id }) => {\n\n    const [estrofas, setEstrofas] = useState([{ Himno_Id: 1, Numero_estrofa: 1, Contenido: \"\" }]);\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        setLoading(true);\n        const fetchData = async () => {\n            const result = await fetch('/api/obtenerestrofas?id='+id, {\n                method: 'get',\n                headers: {\n                    'Content-Type': 'application/json',\n                }\n            });\n            const body = await result.json();\n            setEstrofas(body);\n            setLoading(false);\n        }\n        fetchData();\n    }, [id]);\n\n\n    return(\n        <div className=\"preview-container\">\n            <h1 id=\"titulo-canto\">{titulo}</h1>\n            {estrofas.map((estrofa, key) => { \n                var contenido = (estrofa.Contenido.replace(/(?:\\r\\n|\\r|\\n)/g, '<br>'));\n                return(\n                <div className=\"estrofa\" key={key} dangerouslySetInnerHTML={{__html: contenido}}>\n                </div>\n            )})}\n            <i id=\"close-preview\" className=\"icono icono-cerrar\"></i>\n            <Loader className={\"loader\" + (loading?\" visible\":\"\")}  type=\"ThreeDots\" color=\"#80B041\" height={80} width={80} />\n        </div>\n    );\n};\n\nexport default VistaHimno;","export default __webpack_public_path__ + \"static/media/engranajes.cd2fbc6a.svg\";","export default __webpack_public_path__ + \"static/media/bg.f3c89965.jpg\";","export default __webpack_public_path__ + \"static/media/oraciones.f14a4c4f.jpg\";","export default __webpack_public_path__ + \"static/media/bienvenida.f9810c9a.jpg\";","export default __webpack_public_path__ + \"static/media/anuncios.f56f7a1d.jpg\";","import React, { forwardRef } from 'react';\n\nconst OtrosElementosLista = forwardRef((props, ref) => {\n    return(\n        <>\n        <div ref={ref} id=\"lista-elementos\">\n        {props.otrosElementos.map((elemento, key) => (\n            <div className={\"titulo-container\" + ((elemento.selected)? \" titulo-selected\" : \"\")} key={key} onClick={() => props.agregarElemento(elemento.Id,elemento.Titulo,elemento.tipo,elemento.url)}>\n                <div className=\"titulo\">\n                    <h4>{elemento.Titulo}</h4>\n                </div>\n                <div className=\"iconos-ele\">\n                    <i className={\"icono icono-agregar\" + ((elemento.selected)? \" icono-selected\" : \"\")}></i>\n                </div>\n            </div>\n        ))}\n        </div>\n        </>\n    );\n});\n\nexport default OtrosElementosLista;","import React, { useState, useEffect, useRef, createRef} from 'react';\nimport pptxgen from \"pptxgenjs\";\nimport HimnosLista from '../components/HimnosLista';\nimport PresentacionLista from '../components/PresentacionLista';\nimport VistaHimno from '../components/VistaHimno';\nimport engranajes from '../images/engranajes.svg';\nimport estrofaBg from '../images/bg.jpg';\nimport oracionesBg from '../images/oraciones.jpg';\nimport bienvenida from '../images/bienvenida.jpg';\nimport anuncios from '../images/anuncios.jpg';\nimport OtrosElementosLista from '../components/OtrosElementosLista';\nimport Loader from \"react-loader-spinner\";\n\nconst CrearPage = () => {\n    const refColumns = useRef();\n    const refContainer = useRef();\n    const refBorrarTermino = useRef();\n    const otrosButton = useRef();\n    const refOtrosElementos = createRef();\n    const [loading, setLoading] = useState(false);\n    const [busqueda, setBusqueda] = useState(\"\");\n    const [himnos, setHimnos] = useState([{ Id: 0, Titulo: \"\", Cantidad_estrofas: 0, selected: false }]);\n    const [titulo, setTitulo] = useState(\"\");\n    const [id, setID] = useState(1);\n    const [buscarContenido, setBuscarContenido] = useState(false);\n    const [otrosElementos, setOtrosElementos] = useState([\n        {tipo: \"imagen\", Titulo: \"Bienvenida\", Id: \"i1\", url: bienvenida},\n        {tipo: \"oracion\", Titulo:\"Oración Inicial\", Id: \"o1\"},\n        {tipo: \"oracion\", Titulo:\"Cena\", Id: \"o2\"},\n        {tipo: \"oracion\", Titulo:\"Ofrenda\", Id: \"o3\"},\n        {tipo: \"oracion\", Titulo:\"Predicación\", Id: \"p1\"},\n        {tipo: \"oracion\", Titulo:\"Meditación\", Id: \"p2\"},\n        {tipo: \"oracion\", Titulo:\"Oración Final\", Id: \"o4\"},\n        {tipo: \"imagen\", Titulo: \"Anuncios\", Id: \"i2\", url: anuncios}]);\n    const [presentacion, setPresentacion] = useState([]);\n\n    const compararListas = (lista) => {\n        console.log(\"comparando listas...\");\n        presentacion.forEach((fila) => {\n            let himnoIndex = lista.findIndex(himno => himno.Id === fila.Id);\n            if(himnoIndex !== -1)lista[himnoIndex].selected = true; \n        });\n        return lista;\n    }\n\n    const buscarHimno = (event) => {\n        event.preventDefault();\n        setLoading(true);\n        //Buscar solo en los títulos de los himnos.\n        if(!buscarContenido){\n            if(busqueda.length > 0){\n                fetch('api/buscartitulos?term='+ busqueda, {\n                        method: 'get',\n                        headers: {\n                            'Content-Type': 'application/json',\n                        }\n                    })\n                .then((response) => response.json())\n                .then((data) => {\n                    setHimnos(compararListas(data));\n                    setLoading(false);\n                })\n                .catch((error) => {\n                    console.error(error);\n                });\n            //Si no hay nada en el campo buscar entonces se devuelven \n            //todos los himnos que existen en la Base de datos.\n            } else {\n                fetch('api/himnos')\n                .then((response) => response.json())\n                .then((data) => {\n                    setHimnos(compararListas(data));\n                    setLoading(false);\n                })\n                .catch((error) => {\n                    console.error(error);\n                });\n            }\n        //Buscar en los títulos de los himnos y también en la letra.\n        } else {\n            const estrofasId = new Set();\n            let url = \"\";\n            fetch('/api/buscarenestrofas?term='+ busqueda, {\n                    method: 'get',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    }\n                })\n            .then((response) => response.json())\n            .then((data) => {\n                if(data.length > 0)\n                {\n                    for(var i=0; i < data.length; i++){\n                        estrofasId.add(data[i].Himno_Id);\n                    }\n                    let idArray = Array.from(estrofasId);\n                    for(i = 0; i < idArray.length; i++){\n                        url+= \"&array[]=\" + idArray[i];\n                    }\n\n                    fetch('api/buscarencontenido?term='+ busqueda + url, {\n                            method: 'get',\n                            headers: {\n                                'Content-Type': 'application/json',\n                            }\n                        })\n                    .then((response) => response.json())\n                    .then((data) => {\n                        setHimnos(compararListas(data));\n                        setLoading(false);\n                    })\n                } else {\n                    alert(\"No hay ningún canto con este contenido.\");\n                    setLoading(false);\n                }\n                \n            })\n            .catch((error) => {\n                console.error(error);\n            });\n        }\n    }\n\n    const checkboxChange = (event) => {\n        let isChecked = event.target.checked;\n        setBuscarContenido(isChecked);\n    }\n\n    const busquedaChange = (event) => {\n        const termino = event.target.value;\n        setBusqueda(termino)\n        if(termino.length > 0){\n            refBorrarTermino.current.classList.add('visible');\n        } else {\n            refBorrarTermino.current.classList.remove('visible');\n        }\n        \n    }\n\n    const borrarBusqueda = () => {\n        setLoading(true);\n        setBusqueda(\"\");\n        refBorrarTermino.current.classList.remove('visible');\n        const fetchData = async () => {\n            const result = await fetch('api/himnos');\n            const body = await result.json();\n            setHimnos(compararListas(body));\n            setLoading(false);\n        }\n        fetchData();\n    }\n    \n    const verHimno = (selected_id,selected_titulo) => {\n        setID(selected_id);\n        setTitulo(selected_titulo);\n        toggleView();\n    } \n\n    const agregarHimno = (selected_id,selected_titulo) => {\n        let selectedHimnoIndex = himnos.findIndex(himno => himno.Id === selected_id);\n        let himnosCopy = [...himnos];\n        let updatedHimno = {...himnosCopy[selectedHimnoIndex]};\n        \n        if(!updatedHimno.selected){\n            updatedHimno.selected = true;\n            himnosCopy[selectedHimnoIndex] = updatedHimno;\n            setHimnos(himnosCopy);\n\n            let newHimno = [{ Id: selected_id, Titulo: selected_titulo}];\n            let currentPresentacion = [...presentacion];\n            const updatedPresentacion = currentPresentacion.concat(newHimno);\n            setPresentacion(updatedPresentacion);\n        }\n    }\n\n    const agregarElemento = (selected_id, selected_titulo, selected_tipo, selected_url) => {\n        let selectedElementIndex = otrosElementos.findIndex(elemento => elemento.Id === selected_id);\n        let elementsCopy = [...otrosElementos];\n        let updatedElement = {...elementsCopy[selectedElementIndex]};\n        let newElement =[{ Id: selected_id, Titulo: selected_titulo, tipo: selected_tipo, url:selected_url}];;\n        \n        if(!updatedElement.selected){\n            updatedElement.selected = true;\n            elementsCopy[selectedElementIndex] = updatedElement;\n            setOtrosElementos(elementsCopy);\n            \n            let currentPresentacion = [...presentacion];\n            const updatedPresentacion = currentPresentacion.concat(newElement);\n            setPresentacion(updatedPresentacion);\n        }\n    }\n\n    const bajarHimno = (selected_id) => {\n        let selectedHimnoIndex = presentacion.findIndex(himno => himno.Id === selected_id);\n        if(selectedHimnoIndex < (presentacion.length -1)){\n            let currentObject = presentacion[selectedHimnoIndex];\n            let updatedPresentacion = presentacion.filter( object => object.Id !== selected_id);\n            updatedPresentacion.splice(selectedHimnoIndex + 1, 0, currentObject)\n            setPresentacion(updatedPresentacion);\n        }\n    }\n    const subirHimno = (selected_id) => {\n        let selectedHimnoIndex = presentacion.findIndex(himno => himno.Id === selected_id);\n        if(selectedHimnoIndex > 0){\n            let currentObject = presentacion[selectedHimnoIndex];\n            let updatedPresentacion = presentacion.filter( object => object.Id !== selected_id);\n            updatedPresentacion.splice(selectedHimnoIndex - 1, 0, currentObject)\n            setPresentacion(updatedPresentacion);\n        }\n    }\n    const eliminarHimno = (selected_id) => {\n        let updatedPresentacion = presentacion.filter( object => object.Id !== selected_id);\n        setPresentacion(updatedPresentacion);\n\n        let selectedHimnoIndex = himnos.findIndex(himno => himno.Id === selected_id);\n        let himnosCopy = [...himnos];\n        let updatedHimno = {...himnosCopy[selectedHimnoIndex]};\n        updatedHimno.selected = false;\n        himnosCopy[selectedHimnoIndex] = updatedHimno;\n        setHimnos(himnosCopy);\n\n        let selectedElementIndex = otrosElementos.findIndex(elemento => elemento.Id === selected_id);\n        let elementsCopy = [...otrosElementos];\n        let updatedElement = {...elementsCopy[selectedElementIndex]};\n        updatedElement.selected = false;\n        elementsCopy[selectedElementIndex] = updatedElement;\n        setOtrosElementos(elementsCopy);\n    }\n\n    const toggleView = (event) => {\n        if(!event) {\n            refContainer.current.classList.toggle('visible');\n        } else if(event.target.id === \"himno-overlay\" || event.target.id === \"close-preview\"){\n            refContainer.current.classList.toggle('visible');\n        }\n    }\n\n    const borrarPresentacion = () => {\n        let himnosCopy = [...himnos];\n        let elementsCopy = [...otrosElementos];\n        presentacion.forEach((fila) => {\n            if(!fila.tipo){\n                let selectedHimnoIndex = himnos.findIndex(himno => himno.Id === fila.Id);\n                let updatedHimno = {...himnosCopy[selectedHimnoIndex]};\n                updatedHimno.selected = false;\n                himnosCopy[selectedHimnoIndex] = updatedHimno;\n            } else {\n                let selectedElementIndex = otrosElementos.findIndex(elemento => elemento.Id === fila.Id);\n                let updatedElement = {...elementsCopy[selectedElementIndex]};\n                updatedElement.selected = false;\n                elementsCopy[selectedElementIndex] = updatedElement;\n            }\n        });\n        setOtrosElementos(elementsCopy);\n        setHimnos(himnosCopy);\n        setPresentacion([]);\n    }\n\n    const crearPresentacion = () => {\n        setLoading(true);\n        if(presentacion.length > 0){\n            let nuevaPresentacion = new pptxgen();\n            nuevaPresentacion.author = 'Creador de presentaciones';\n            nuevaPresentacion.subject = 'Presentación de cantos';\n            nuevaPresentacion.title = 'Presentación de cantos';\n            let fetchArray = [];\n            for(let i = 0; i < presentacion.length; i++){\n                if(! presentacion[i].tipo)\n                fetchArray.push(fetch('api/obtenerestrofas?id=' + presentacion[i].Id));\n            }\n            Promise.all(fetchArray)\n            .then((responses) => {\n                return Promise.all(responses.map((response) => {\n                    return response.json();\n                }));\n            })\n            .then((contenidoHimnos) => {\n                let himnosIndex = 0;\n                presentacion.forEach((fila, index) => {\n                    let slide = nuevaPresentacion.addSlide();\n                    if(!fila.tipo){\n                        slide.background = { path : oracionesBg};\n                        slide.addText(\n                            fila.Titulo,\n                            {\n                                x: 0,\n                                y: 1.51,\n                                h: 2.61,\n                                w: \"100%\",\n                                color: 'FFFFFF',\n                                fontSize: 60,\n                                bold: true,\n                                align: nuevaPresentacion.AlignH.center\n                            }\n                        );\n                        let himno = contenidoHimnos[himnosIndex];\n                        himno.forEach( (estrofa, i) => {\n                            slide = nuevaPresentacion.addSlide();\n                            slide.background = { color : \"000000\"};\n                            slide.background = { path : estrofaBg};\n                            slide.addText(\n                                estrofa.Numero_estrofa,\n                                {\n                                    x: 0.08,\n                                    y: 0,\n                                    w: 0.5,\n                                    h: 0.5,\n                                    color: 'FFFFFF',\n                                    align: nuevaPresentacion.AlignH.left\n                                }\n                            );\n                            let estrofaFontSize = 50;\n                            let contenido = estrofa.Contenido.replace(/[\\r\\n]+$/, '');\n                            let cantidadLineas = contenido.split(/\\r\\n|\\r|\\n/).length;\n                            if(cantidadLineas >= 6 && cantidadLineas < 8) estrofaFontSize = 46;\n                            else if(cantidadLineas > 7 ) estrofaFontSize = 40;\n                            else estrofaFontSize = 50;\n                            slide.addText(\n                                contenido,\n                                {\n                                    isTextBox: true,\n                                    shrinkText: true,\n                                    autofit: true,\n                                    x: 0,\n                                    y: 0,\n                                    w: \"100%\",\n                                    h: \"100%\",\n                                    fontSize: estrofaFontSize,\n                                    color: 'FFFFFF',\n                                    align: nuevaPresentacion.AlignH.center\n                                }\n                            );\n                            if(i === himno.length - 1){\n                                slide.addText(\n                                    \"Fin\",\n                                    {\n                                        x: 9.42,\n                                        y: 5.145,\n                                        w: 0.54,\n                                        h: 0.42,\n                                        color: 'FFFFFF',\n                                        align: nuevaPresentacion.AlignH.left\n                                    }\n                                );\n                            }\n                        });\n                        himnosIndex += 1;\n                    } else if(fila.tipo === \"oracion\"){\n                        slide.background = { path : oracionesBg};\n                        slide.addText(\n                            fila.Titulo,\n                            {\n                                x: 0,\n                                y: 1.51,\n                                h: 2.61,\n                                w: \"100%\",\n                                color: 'FFFFFF',\n                                fontSize: 60,\n                                bold: true,\n                                align: nuevaPresentacion.AlignH.center\n                            }\n                        );\n                    } else if(fila.tipo === \"imagen\"){\n                        if(fila.Titulo === \"Bienvenida\")\n                            slide.background = { path : bienvenida};\n                        else \n                        slide.background = { path : anuncios};\n                    }\n                });\n                nuevaPresentacion.writeFile({fileName: \"Presentacion de prueba.pptx\"});\n                setLoading(false);\n            })\n            .catch((error) => {\n                console.error(error);\n            });\n        }\n    }\n\n    const ocultarMostrarListaElementos = () => {\n        refOtrosElementos.current.classList.toggle('visible');\n    }\n  \n    useEffect(() => {\n        setLoading(true);\n        const fetchData = async () => {\n            const result = await fetch('api/himnos');\n            const body = await result.json();\n            setHimnos(body);\n            setLoading(false);\n        }\n        fetchData();\n\n    }, []);\n\n    const checkClickArea = (event) => {\n        //console.log\n        if (!refOtrosElementos.current.contains(event.target) && !otrosButton.current.contains(event.target)){\n            refOtrosElementos.current.classList.remove('visible');\n        } \n    }\n\n    return(\n        <React.Fragment>\n            <main id=\"crearContainer\" className=\"mainContainer\" onClick={checkClickArea}>\n                <header className=\"two-columns\">\n                    <div className=\"header-container\">\n                        <div className=\"header-left\">\n                        </div>\n                        <div className=\"header-right\">\n                            <img id=\"engranajes\" className=\"image-header\" src={engranajes} alt=\"\" />\n                        </div>  \n                    </div>  \n                    <div className=\"mas-abajo\" onClick={() => {refColumns.current.scrollIntoView({behavior: 'smooth'}); }}></div>\n                </header>\n                <div className=\"linea-divisoria\"></div>\n                <div className=\"columnsContainer\" ref={refColumns}>\n                    <div className=\"column column1\">\n                        <section>\n                            <h2>Lista de cantos disponibles</h2>\n                            <form onSubmit={buscarHimno}>\n                                <div id=\"buscar-container\">\n                                    <button type=\"submit\"><i className=\"icono icono-buscar\"></i></button>\n                                    <input type=\"text\" name=\"search\" placeholder=\"Buscar Canto\" value={busqueda} onChange={busquedaChange}/>\n                                    <div onClick={borrarBusqueda}><i id=\"borrar-termino\" className=\"icono icono-cerrar\" ref={refBorrarTermino}></i></div>\n                                </div>\n                                <label>\n                                Buscar en contenido <input type=\"checkbox\" onChange={checkboxChange}/>\n                                </label>\n                            </form>\n                            <HimnosLista himnos={himnos} verHimno={verHimno} agregarHimno={agregarHimno}/>\n                        </section>\n                    </div>\n                    <div className=\"column column2\">\n                        <section>\n                            <h2>Lista de elementos en la presentación</h2>\n                            <div id=\"iconos-presentacion\">\n                                <div className=\"icono\">\n                                    <i ref={otrosButton} className=\"icono-crear\" onClick={ocultarMostrarListaElementos}></i>\n                                    Otros\n                                </div>\n                                <div className=\"icono\">\n                                    <i className=\"icono-descargar\" onClick={crearPresentacion}></i>\n                                    Descargar\n                                </div>\n                                <div className=\"icono\">\n                                    <i className=\"icono-borrar-todo\" onClick={borrarPresentacion}></i>\n                                    Borrar lista\n                                </div>\n                            </div>\n                            <OtrosElementosLista ref={refOtrosElementos} otrosElementos={otrosElementos} agregarElemento={agregarElemento}/>\n                            <PresentacionLista presentacion={presentacion} bajarHimno={bajarHimno} subirHimno={subirHimno} eliminarHimno={eliminarHimno}/>\n                        </section>\n                    </div>\n                </div>\n                <div ref={refContainer} id=\"himno-overlay\" onClick={toggleView}>\n                    <VistaHimno titulo={titulo} id={id}/>\n                </div>\n                \n            </main>\n            <Loader className={\"loader\" + (loading?\" visible\":\"\")}  type=\"ThreeDots\" color=\"#ACD25D\" height={80} width={80} />\n        </React.Fragment>   \n    );\n};\n\nexport default CrearPage;","import React, { forwardRef } from 'react';\n\nconst BusquedaLista = forwardRef((props, ref) => {\n    return(\n        <>\n        <div ref={ref} id=\"lista-busqueda\">\n            <i className=\"icono icono-cerrar\" onClick={props.cerrarOverlay}></i>\n            <p>Hay más de un canto que coincide con su busqueda por favor</p>\n            <h3>Elija el canto que desea modificar.</h3>\n            {props.himnos.map((elemento, key) => (\n                <div className={\"titulo-container\" + ((elemento.selected)? \" titulo-selected\" : \"\")} key={key} onClick={() => props.desplegarEstrofas(elemento.Id,elemento.Titulo)}>\n                    <div className=\"titulo\">\n                        <h4>{elemento.Titulo}</h4>\n                    </div>\n                    <div className=\"iconos-ele\">\n                        <i className={\"icono icono-agregar\" + ((elemento.selected)? \" icono-selected\" : \"\")}></i>\n                    </div>\n                </div>\n            ))}\n        </div>\n        </>\n    );\n});\n\nexport default BusquedaLista;","import React, {useRef} from 'react';\nimport TextareaAutosize from 'react-textarea-autosize';\n\nconst EstrofasModificables = (props) => {\n    const refEstrofas = useRef();\n\n    const handleChange = (estrofa, e) => {\n        props.updateEstrofa(estrofa.Numero_estrofa, e)\n    }\n\n    const keyPressed = (event) => {\n        var textarea = event.target,\n            text = textarea.value,\n            numberOfLines = (text.match(/\\n/g) || []).length + 1,\n            maxRows = 8;\n            console.log(numberOfLines);\n        if (event.which === 13 && numberOfLines >= maxRows ) {\n          event.preventDefault();\n          return false;\n        }\n    }\n\n    const focusTextarea = (event) => {\n        let textarea = event.target.getElementsByTagName('textarea');\n        if(textarea.length > 0) textarea[0].focus();\n    }\n    return(\n        <>\n            <div id=\"estrofas-inputs\" ref={refEstrofas}>\n                {props.estrofas.map((estrofa, key) => (\n                    <div className=\"textarea-container\" key={key} onClick={focusTextarea}>\n                        <TextareaAutosize maxLength=\"272\" onKeyPress={keyPressed} className=\"estrofa-textarea\" maxRows=\"8\" cols=\"32\" value={estrofa.Contenido} onChange={(e) => handleChange(estrofa, e)} />\n                        <h4>Diapositiva {estrofa.Numero_estrofa}</h4>\n                        <i className=\"icono icono-cerrar\" onClick={() => props.borrarEstrofa(estrofa.Numero_estrofa)}></i>\n                    </div>\n                ))}\n            </div>\n        </>\n    );\n};\n\nexport default EstrofasModificables;","export default __webpack_public_path__ + \"static/media/agregar_image.555e06bf.svg\";","import React, { useState, createRef, useRef} from 'react';\nimport BusquedaLista from '../components/BusquedaLista';\nimport EstrofasModificables from '../components/EstrofasModificables';\nimport Loader from \"react-loader-spinner\";\nimport { usePopup } from 'react-hook-popup';\nimport agregar_image from '../images/agregar_image.svg';\nconst AgregarPage = () => {\n    const refColumns = useRef();\n    const refBusquedaRes = createRef();\n    const refOverlay = useRef();\n    const refRelleno = useRef();\n    const [loading, setLoading] = useState(false);\n    const [busqueda, setBusqueda] = useState(\"\");\n    const [himnos, setHimnos] = useState([{ Id: 0, Titulo: \"\", Cantidad_estrofas: 0, selected: false }]);\n    const [estrofas, setEstrofas] = useState([]);\n    const [confirm] = usePopup('confirm', ({ message, confirm, cancel }) => (\n        <div className=\"confirm-guardar modal\">\n            ¿Está seguro que desea AGREGAR este canto a la base de datos?<br/><span>Después de agregar un himno este se puede modificar en la sección respectiva.</span>\n            <button className=\"aceptar-btn\" onClick={confirm}>Aceptar</button>\n            <button className=\"cancelar-btn\" onClick={cancel}>Cancelar</button>\n        </div>\n    ));\n\n\n    //Buscar los himnos que coincidan con el texto de busqueda cuando el botón buscar es presionado.\n    const verificarTitulo = (event) => {\n        event.preventDefault();\n        setLoading(true);\n        //Buscar solo en los títulos de los himnos.\n        if(busqueda.length > 0){\n            fetch('api/buscartitulo?term='+ busqueda, {\n                    method: 'get',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    }\n                })\n            .then(response => response.json())\n            .then(result => {\n                if(result.length > 1){\n                    refOverlay.current.style.display = \"block\";\n                    setHimnos(result);\n                    setLoading(false);\n                } else if(result.length > 0){\n                    desplegarEstrofas(result[0].Id, result[0].Titulo);\n                    setLoading(false);\n                } else {\n                    alert(\"No hay ningún título que coincida.\");\n                    setLoading(false);\n                }\n            })\n            .catch((error) => {\n                console.error(error);\n                alert(\"¡Error en la conexión!\");\n                setLoading(false);\n            });\n        } else {\n            alert(\"La busqueda está vacía. Digite algun texto para buscar.\");\n            setLoading(false);\n        }\n    }\n\n    const busquedaChange = (event) => {\n        const termino = event.target.value;\n        setBusqueda(termino);\n    }\n\n    const desplegarEstrofas = (selected_id,selected_titulo) => {\n        setLoading(true);\n        fetch('api/obtenerestrofas?id='+ selected_id)\n        .then(response => response.json())\n        .then(data => {\n            setEstrofas(data); \n            setLoading(false);\n            refRelleno.current.style.display = \"none\";\n        })\n        .catch(error => console.error(error));\n        setBusqueda(selected_titulo);\n        refOverlay.current.style.display = \"none\";\n    }\n\n    const updateEstrofa = (numero_estrofa, event) => {\n        let estrofasCopy = [...estrofas];\n        let currentEstrofa = event.target.value;\n        estrofasCopy[numero_estrofa - 1].Contenido = currentEstrofa;\n        setEstrofas(estrofasCopy);\n    }\n\n    const borrarEstrofa = (numero) => {\n        if(estrofas.length > 1){\n            let estrofaIndex = numero - 1;\n            let estrofasCopy = [...estrofas];\n            estrofasCopy.splice(estrofaIndex, 1);\n\n            estrofasCopy.forEach((estrofa) => {\n                if(estrofa.Numero_estrofa >= estrofaIndex + 1){\n                    estrofa.Numero_estrofa -= 1;\n                    estrofa.updated = true;\n                }\n            });\n            setEstrofas(estrofasCopy);\n        } else {\n            alert(\"No se puede eliminar. Cada himno debe tener mínimo una estrofa.\");\n        }\n    }\n\n    const nuevaDiapositiva = () => {\n        let estrofasCopy = [...estrofas];\n        estrofasCopy.push({Himno_Id: null, Numero_estrofa: estrofasCopy.length + 1, Contenido: \"\"});\n        setEstrofas(estrofasCopy);\n        refRelleno.current.style.display = \"none\";\n    }\n\n    const borrarContenido = () => {\n        setEstrofas([]);\n        refRelleno.current.style.display = \"block\";\n    }\n\n    const guardarCanto = async() => {\n        if(estrofas.length > 0 && busqueda.length > 1){\n            const confirmed = await confirm();\n            if(confirmed){\n                setLoading(true);\n                console.log(busqueda, estrofas);\n                let fetchArray = [];\n                let himnoData = {titulo: busqueda, cantidad: estrofas.length};\n                fetch('api/insertarhimno', {\n                    method: 'post',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify(himnoData)\n                })\n                .then((response) => response.json())\n                .then((data) => {\n                    let himnoId = data.insertId;\n                    estrofas.forEach((estrofa, index) => {\n                        let numero_estrofa = index + 1;\n                        let insertarData = {id: himnoId, numero: numero_estrofa, contenido: estrofa.Contenido}\n                        fetchArray.push(\n                            fetch('api/insertarestrofa', {\n                                method: 'post',\n                                headers: {\n                                    'Content-Type': 'application/json',\n                                },\n                                body: JSON.stringify(insertarData)\n                            })\n                        );\n                    })\n                    Promise.allSettled(fetchArray)\n                    .then((results) => {\n                        console.log(results);\n                        setEstrofas([]);\n                        refRelleno.current.innerHTML = '<h1>El canto \"' + busqueda + '\" ha sido agregado a la Base de datos.</h1>';\n                        refRelleno.current.style.display = \"block\";\n                        setBusqueda(\"\");\n                        setLoading(false);\n                    })\n                    .catch((error) => {\n                        console.error(error);\n                        setLoading(false);\n                    });\n                })\n                .catch((error) => {\n                    console.error(error);\n                    alert(\"¡Error en la conexión!\");\n                    setLoading(false);\n                });\n            }\n            \n        } else {\n            if(estrofas.length === 0) alert(\"Debe haber mínimo una estrofa\");\n            else if(busqueda.length === 0) alert(\"Se necesita un título para el canto.\");\n        }\n    }\n\n    const cerrarOverlay = () => {\n        refOverlay.current.style.display = \"none\";\n    }\n\n    return(\n        <React.Fragment>\n            <main id=\"agregarContainer\" className=\"mainContainer\">\n                <header className=\"two-columns\">\n                    <div className=\"header-container\">\n                            <div className=\"header-left\">\n                            </div>\n                            <div className=\"header-right\">\n                                <img id=\"agregar\" className=\"image-header\" src={agregar_image} alt=\"\" />\n                            </div>  \n                        </div>  \n                        <div className=\"mas-abajo\" onClick={() => {refColumns.current.scrollIntoView({behavior: 'smooth'}); }}></div>    \n                </header>\n                <div className=\"linea-divisoria\"></div>\n                <div className=\"columnsContainer\" ref={refColumns}>\n                    <div className=\"column column1\">\n                        <section>\n                            <form onSubmit={verificarTitulo}>\n                                <div className=\"titulo-modificar\">\n                                    <h2>Título:</h2>\n                                    <div className=\"buscar-container\">\n                                        <input type=\"text\" name=\"search\" placeholder=\"Buscar Canto\" value={busqueda} onChange={busquedaChange}/>\n                                    </div>\n                                </div>\n                                <button type=\"submit\">Verificar</button>\n                            </form>\n                        </section>\n                    </div>\n                    <div className=\"column column2\">\n                        <section>\n                            <h2 className=\"cantidad-header\">Cantidad de estrofas:</h2>\n                            <div className=\"numero\">{estrofas.length}</div>\n                            <div id=\"add-icons\">\n                            <div className=\"guardar-container\" onClick={nuevaDiapositiva}>\n                                    <i className=\"icono-nueva\"></i>\n                                    Nueva Diapositiva\n                                </div>\n                                <div className=\"guardar-container\" onClick={guardarCanto}>\n                                    <i className=\"icono-salvar\"></i>\n                                    Guardar Canto\n                                </div>\n                                <div className=\"guardar-container\" onClick={borrarContenido}>\n                                    <i className=\"icono-borrar-todo\"></i>\n                                    Borrar todo\n                                </div>\n                            </div>\n                        </section>\n                    </div>\n                    \n                </div>\n            <div className=\"overlay\" ref={refOverlay}>\n                <BusquedaLista ref={refBusquedaRes} himnos={himnos} desplegarEstrofas={desplegarEstrofas} cerrarOverlay={cerrarOverlay}/>\n            </div>\n            <EstrofasModificables estrofas={estrofas} updateEstrofa={updateEstrofa} borrarEstrofa={borrarEstrofa}/>\n            <div ref={refRelleno} className=\"relleno\"><h1>Escoja un título y agregue diapositivas.</h1></div>\n            </main>\n            <Loader className={\"loader\" + (loading?\" visible\":\"\")}  type=\"ThreeDots\" color=\"#80B041\" height={80} width={80} />\n        </React.Fragment>   \n    )\n}\n\nexport default AgregarPage;","export default __webpack_public_path__ + \"static/media/edit_image.d4c1872c.svg\";","import React, { useState, createRef, useRef} from 'react';\nimport BusquedaLista from '../components/BusquedaLista';\nimport EstrofasModificables from '../components/EstrofasModificables';\nimport edit_image from '../images/edit_image.svg';\nimport Loader from \"react-loader-spinner\";\nimport { usePopup } from 'react-hook-popup';\n\nconst ModificarPage = () => {\n    const refColumns = useRef();\n    const refBusquedaRes = createRef();\n    const refOverlay = useRef();\n    const refRelleno = useRef();\n    const [selectedHimno, setSelectedHimno] = useState([{id: 0, titulo:\"\", cantidad: 0, updated: false}]);\n    const [loading, setLoading] = useState(false);\n    const [busqueda, setBusqueda] = useState(\"\");\n    const [himnos, setHimnos] = useState([{ Id: 0, Titulo: \"\", Cantidad_estrofas: 0, selected: false }]);\n    const [estrofas, setEstrofas] = useState([]);\n    const [buscarContenido, setBuscarContenido] = useState(false);\n    const [confirm] = usePopup('confirm', ({ message, confirm, cancel }) => (\n        <div className=\"confirm-modal modal\">\n            ¿Está seguro que desea ELIMINAR el canto <br/>\"{selectedHimno[0].titulo}\"?<br/><span>Después de eliminar un canto este ya no estará disponible.</span>\n            <button className=\"eliminar-btn\" onClick={confirm}>Eliminar</button>\n            <button className=\"cancelar-btn\" onClick={cancel}>Cancelar</button>\n        </div>\n    ));\n    const [guardar] = usePopup('guardar', ({ message, confirm, cancel }) => (\n        <div className=\"confirm-guardar modal\">\n            ¿Está seguro que desea Guardar los cambios de este canto en la base de datos?\n            <button className=\"aceptar-btn\" onClick={confirm}>Aceptar</button>\n            <button className=\"cancelar-btn\" onClick={cancel}>Cancelar</button>\n        </div>\n    ));\n\n\n    const modificarSelectedHimno = (propiedades, valor) => {\n        let selectedHimnoCopy = [...selectedHimno];\n        propiedades.forEach((propiedad, index) => {\n            selectedHimnoCopy[0][propiedad] = valor[index];\n        });\n        setSelectedHimno(selectedHimnoCopy);\n    }\n\n    //Buscar los himnos que coincidan con el texto de busqueda cuando el botón buscar es presionado.\n    const buscarHimno = (event) => {\n        event.preventDefault();\n        modificarSelectedHimno([\"updated\"], [false]);\n        setEstrofas([]);\n        setLoading(true);\n        //Buscar solo en los títulos de los himnos.\n        if(!buscarContenido){\n            if(busqueda.length > 0){\n                fetch('api/buscartitulos?term='+ busqueda, {\n                        method: 'get',\n                        headers: {\n                            'Content-Type': 'application/json',\n                        }\n                    })\n                .then(response => response.json())\n                .then(result => {\n                    setLoading(false);\n                    if(result.length > 1){\n                        refOverlay.current.style.display = \"block\";\n                        setHimnos(result);\n                    } else if(result.length > 0){\n                        desplegarEstrofas(result[0].Id, result[0].Titulo);\n                    } else {\n                        alert(\"No hay coincidencias con su busqueda\");\n                        setLoading(false);\n                    }\n                })\n                .catch((error) => {\n                    console.error(error);\n                    alert(\"¡Error en la conexión!\");\n                    setLoading(false);\n                });\n            } else {\n                alert(\"La busqueda está vacía. Digite algun texto para buscar.\");\n                setLoading(false);\n            }\n        //Buscar en los títulos de los himnos y también en la letra.\n        } else {\n            if(busqueda.length > 0){\n                const estrofasId = new Set();\n                let url = \"\";\n                fetch('/api/buscarenestrofas?term='+ busqueda, {\n                        method: 'get',\n                        headers: {\n                            'Content-Type': 'application/json',\n                        }\n                    })\n                .then(response => response.json())\n                .then(result => {\n                    for(var i=0; i < result.length; i++){\n                        estrofasId.add(result[i].Himno_Id);\n                    }\n                    let idArray = Array.from(estrofasId);\n                    for(i = 0; i < idArray.length; i++){\n                        url+= \"&array[]=\" + idArray[i];\n                    }\n                    fetch('api/buscarencontenido?term='+ busqueda + url, {\n                        method: 'get',\n                        headers: {\n                            'Content-Type': 'application/json',\n                        }\n                    })\n                    .then(response => response.json())\n                    .then(result => {\n                        setLoading(false);\n                        if(result.length > 1){\n                            refOverlay.current.style.display = \"block\";\n                            setHimnos(result);    \n                        } else if(result.length > 0){\n                            desplegarEstrofas(result[0].Id, result[0].Titulo);\n                        } else {\n                            alert(\"No hay coincidencias con su busqueda\");\n                            setLoading(false);\n                        }\n                    })\n                    .catch((error) => {\n                        console.error(error);\n                        alert(\"¡Error en la conexión!\");\n                        setLoading(false);\n                    });\n                })\n                .catch((error) => {\n                    console.error(error);\n                    alert(\"¡Error en la conexión!\");\n                    setLoading(false);\n                });\n            } else {\n                window.alert(\"La busqueda está vacía. Digite algun texto para buscar.\");\n                setLoading(false);\n            }\n        }\n    }\n\n    const checkboxChange = (event) => {\n        let isChecked = event.target.checked;\n        setBuscarContenido(isChecked);\n    }\n\n    const busquedaChange = (event) => {\n        const termino = event.target.value;\n        setBusqueda(termino);\n        if(estrofas.length > 0){\n            modificarSelectedHimno([\"titulo\", \"updated\"], [termino, true]);\n        }\n    }\n\n    const desplegarEstrofas = (selected_id,selected_titulo) => {\n        setLoading(true);\n        refRelleno.current.style.display = \"none\";\n        fetch('api/obtenerestrofas?id='+ selected_id)\n        .then(response => response.json())\n        .then(data => {\n            setEstrofas(data); \n            setLoading(false);\n            modificarSelectedHimno([\"titulo\", \"cantidad\", \"id\"], [selected_titulo, data.length, data[0].Himno_Id]);\n        })\n        .catch(error => console.error(error));\n        setBusqueda(selected_titulo);\n        refOverlay.current.style.display = \"none\";\n    }\n\n    const updateEstrofa = (numero_estrofa, event) => {\n        let estrofasCopy = [...estrofas];\n        let currentEstrofa = event.target.value;\n        estrofasCopy[numero_estrofa - 1].Contenido = currentEstrofa;\n        estrofasCopy[numero_estrofa - 1].updated = true;\n        setEstrofas(estrofasCopy);\n    }\n\n    const borrarEstrofa = (numero) => {\n        if(estrofas.length > 1){\n            let estrofaIndex = numero - 1;\n            console.log(\"estrofa index: \" + estrofaIndex);\n            let estrofasCopy = [...estrofas];\n            estrofasCopy.splice(estrofaIndex, 1);\n\n            estrofasCopy.forEach((estrofa) => {\n                if(estrofa.Numero_estrofa >= estrofaIndex + 1){\n                    estrofa.Numero_estrofa -= 1;\n                    estrofa.updated = true;\n                }\n            });\n            modificarSelectedHimno([\"updated\"], [true]);\n            setEstrofas(estrofasCopy);\n        } else {\n            alert(\"No se puede elminar. Cada himno debe tener mínimo una estrofa.\");\n        }\n        \n    }\n\n    const nuevaDiapositiva = () => {\n        if(selectedHimno[0].id !== 0){\n            let estrofasCopy = [...estrofas];\n            estrofasCopy.push({Himno_Id: estrofasCopy[0].Himno_Id, Numero_estrofa: estrofasCopy.length + 1, Contenido: \"\"});\n            setEstrofas(estrofasCopy);\n        } else {\n            alert(\"No ha seleccionado ningún canto para modificar.\");\n        }\n    }\n\n    const eliminarCanto = async() => {\n        if(selectedHimno[0].cantidad > 0){\n            const confirmed = await confirm();\n            if (confirmed) {\n                let fetchArray = [];\n                let borrarData = {id: selectedHimno[0].id}\n                fetchArray.push(\n                    fetch('api/borrartodasestrofas?id=' + borrarData.id, {\n                        method: 'delete',\n                        headers: {\n                            'Content-Type': 'application/json',\n                        }\n                    })\n                );\n                fetchArray.push(\n                    fetch('api/borrarhimno?id=' + borrarData.id, {\n                        method: 'delete',\n                        headers: {\n                            'Content-Type': 'application/json',\n                        }\n                    })\n                );\n                Promise.all(fetchArray)\n                .then(() => {\n                    setSelectedHimno([{id: 0, titulo:\"\", cantidad: 0, updated: false}]);\n                    setEstrofas([]);\n                    setHimnos([{ Id: 0, Titulo: \"\", Cantidad_estrofas: 0, selected: false }]);\n                    setBusqueda(\"\");\n                    refRelleno.current.innerHTML = \"<h1>El canto ha sido eliminado.</h1>\";\n                    refRelleno.current.style.display = \"block\";\n                })\n                .catch((error) => {\n                    console.error(error);\n                    setLoading(false);\n                });\n            } else {\n                console.log(\"No ha pasado nada\");\n            } \n        } else {\n            alert(\"No hay nada que eliminar. Selecciona un canto antes.\")\n        }\n    }\n\n    const actualizarHimno = async() => {\n        if(selectedHimno[0].cantidad > 0){\n            const confirmed = await guardar();\n            if (confirmed) {\n                setLoading(true);\n                let fetchArray = [];\n                let estrofaData = {};\n                let himnoData = {titulo: selectedHimno[0].titulo, cantidad: estrofas.length, id: estrofas[0].Himno_Id};\n                let borrarCantidad;\n                //Borrar estrofas si es necesario, se borra de la última hacia atras.\n                if(selectedHimno[0].cantidad > estrofas.length){\n                    borrarCantidad = selectedHimno[0].cantidad - estrofas.length;\n                    for(var i = 0; i < borrarCantidad; i++){\n                        let borrarData = {id: himnoData.id, numero: selectedHimno[0].cantidad - i}\n                        fetchArray.push(\n                            fetch('api/borrarestrofa?id=' + borrarData.id + \"&cantidad=\" + borrarData.numero, {\n                                method: 'delete',\n                                headers: {\n                                    'Content-Type': 'application/json',\n                                }\n                            })\n                        );\n                    }\n                    let nuevaCantidad = selectedHimno[0].cantidad - borrarCantidad;\n                    modificarSelectedHimno([\"cantidad\"], [nuevaCantidad]);\n                //Insertar nuevas diapositivas\n                } else if(selectedHimno[0].cantidad < estrofas.length){\n                    let insertarCantidad =  estrofas.length - selectedHimno[0].cantidad;\n                    for(i = 1; i <= insertarCantidad; i++){\n                        let numero_estrofa = selectedHimno[0].cantidad + i;\n                        let insertarData = {id: himnoData.id, numero: numero_estrofa, contenido: estrofas[numero_estrofa - 1].Contenido}\n                        fetchArray.push(\n                            fetch('api/insertarestrofa', {\n                                method: 'post',\n                                headers: {\n                                    'Content-Type': 'application/json',\n                                },\n                                body: JSON.stringify(insertarData)\n                            })\n                        );\n                        // console.log(\"La estrofa: \" + insertarData.numero + \" fue agregada. Contenido: \", insertarData.contenido);\n                        let estrofasCopy = [...estrofas];\n                        estrofasCopy[numero_estrofa - 1].updated = false;\n                        setEstrofas(estrofasCopy);\n                    }\n                    let nuevaCantidad = selectedHimno[0].cantidad + insertarCantidad;\n                    modificarSelectedHimno([\"cantidad\"], [nuevaCantidad]);\n                }\n                //Actualizar todas las diapositivas que hayan sido actualizadas.\n                if(selectedHimno[0].updated){\n                    fetchArray.push(\n                        fetch('api/actualizartitulo', {\n                                method: 'post',\n                                headers: {\n                                    'Content-Type': 'application/json',\n                                },\n                                body: JSON.stringify(himnoData)\n                            })\n                    );\n                    // console.log(\"El himno ha sido actualizado.\", himnoData);\n                    modificarSelectedHimno([\"updated\"], [false]);\n                } else {\n                    console.log(\"El himno NO ha sido actualizado\");\n                }\n\n                let estrofasCopy = [...estrofas];\n                estrofasCopy.forEach(estrofa => {\n                    if(estrofa.updated){\n                        estrofaData = {id: estrofa.Himno_Id, numero: estrofa.Numero_estrofa, contenido: estrofa.Contenido}\n                        fetchArray.push(\n                            fetch('api/actualizarestrofa', {\n                                    method: 'post',\n                                    headers: {\n                                        'Content-Type': 'application/json',\n                                    },\n                                    body: JSON.stringify(estrofaData)\n                                })\n                        );\n                        // console.log(\"La estrofa: \" + estrofaData.numero + \" ha sido actualizada.\");\n                        estrofa.updated = false;\n                    } else {\n                        console.log(\"La estrofa:\" + estrofa.Numero_estrofa + \" NO ha sido actualizado\");\n                    }\n\n                });\n                \n                Promise.all(fetchArray)\n                .then(() => {\n                    setEstrofas([]);\n                    setSelectedHimno([{id: 0, titulo:\"\", cantidad: 0, updated: false}]);\n                    setBusqueda(\"\");\n                    refRelleno.current.style.display = \"block\";\n                    refRelleno.current.innerHTML = \"<h1>El canto ha sido actualizado.</h1>\";\n                    setLoading(false);\n                })\n                .catch((error) => {\n                    console.error(error);\n                    setLoading(false);\n                });\n            }\n        } else {\n            alert(\"No hay nada que guardar.\");\n        }\n        \n    }\n\n    const cerrarOverlay = () => {\n        refOverlay.current.style.display = \"none\";\n    }\n\n    return(\n        <React.Fragment>\n            <main id=\"modificarContainer\" className=\"mainContainer\">\n                <header className=\"two-columns\">\n                <div className=\"header-container\">\n                        <div className=\"header-left\">\n                        </div>\n                        <div className=\"header-right\">\n                            <img id=\"edit-image\" className=\"image-header\" src={edit_image} alt=\"\" />\n                        </div>  \n                    </div>  \n                    <div className=\"mas-abajo\" onClick={() => {refColumns.current.scrollIntoView({behavior: 'smooth'}); }}></div>\n                </header>\n                <div className=\"linea-divisoria\"></div>\n                <div className=\"columnsContainer\" ref={refColumns}>\n                    <div className=\"column column1\">\n                        <section>\n                            <form onSubmit={buscarHimno}>\n                                <div className=\"titulo-modificar\">\n                                    <h2>Título:</h2>\n                                    <div className=\"buscar-container\">\n                                        <input type=\"text\" name=\"search\" placeholder=\"Buscar Canto\" value={busqueda} onChange={busquedaChange}/>\n                                    </div>\n                                </div>\n                                <button type=\"submit\">Buscar</button>\n                                <label>\n                                Buscar en contenido <input type=\"checkbox\" onChange={checkboxChange}/>\n                                </label>\n                            </form>\n                        </section>\n                    </div>\n                    <div className=\"column column2\">\n                        <section>\n                            <h2 className=\"cantidad-header\">Cantidad de estrofas:</h2>\n                            <div className=\"numero\">{estrofas.length}</div>\n                            <div id=\"modify-icons\">\n                            <div className=\"guardar-container\" onClick={nuevaDiapositiva}>\n                                    <i className=\"icono-nueva\"></i>\n                                    Nueva Diapositiva\n                                </div>\n                                <div className=\"guardar-container\" onClick={actualizarHimno}>\n                                    <i className=\"icono-salvar\"></i>\n                                    Guardar Cambios\n                                </div>\n                                <div className=\"guardar-container\" onClick={eliminarCanto}>\n                                    <i className=\"icono-eliminar\"></i>\n                                    Eliminar Canto\n                                </div>\n                            </div>\n                        </section>\n                    </div>\n                    \n                </div>\n            <div className=\"overlay\" ref={refOverlay}>\n                <BusquedaLista ref={refBusquedaRes} himnos={himnos} desplegarEstrofas={desplegarEstrofas} cerrarOverlay={cerrarOverlay}/>\n            </div>\n            <EstrofasModificables estrofas={estrofas} updateEstrofa={updateEstrofa} borrarEstrofa={borrarEstrofa}/>\n            <div ref={refRelleno} className=\"relleno\"><h1>Escoja el canto que desea modificar.</h1></div>\n            </main>\n            <Loader className={\"loader\" + (loading?\" visible\":\"\")}  type=\"ThreeDots\" color=\"#80B041\" height={80} width={80} />\n        </React.Fragment>   \n    )\n    \n};\n\nexport default ModificarPage;","import React from 'react';\n\nconst NotFoundPage = () => (\n    <h1>404: La página no se encuentra.</h1>\n);\n\nexport default NotFoundPage;","import {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n} from 'react-router-dom';\nimport TopNav from './TopNav';\nimport Footer from './Footer';\nimport './App.css';\nimport HomePage from './pages/HomePage';\nimport CrearPage from './pages/CrearPage';\nimport AgregarPage from './pages/AgregarPage';\nimport ModificarPage from './pages/ModificarPage';\nimport NotFoundPage from './pages/NotFoundPage';\nimport { PopupProvider } from 'react-hook-popup';\n\nfunction App() {\n  return (\n    <Router>\n      <PopupProvider>\n        <div className=\"App\">\n          <TopNav />\n          <div id=\"page-body\">\n            <Switch>\n              <Route path=\"/\" component={HomePage} exact />\n              <Route path=\"/crear\" component={CrearPage} />\n              <Route path=\"/agregar\" component={AgregarPage} />\n              <Route path=\"/modificar\" component={ModificarPage} />\n              <Route component={NotFoundPage} />\n            </Switch>\n          </div>\n          <Footer/>\n        </div>\n      </PopupProvider>\n      \n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'whatwg-fetch';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}