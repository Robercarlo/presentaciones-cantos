{"version":3,"sources":["images/Logo-Coronado.svg","TopNav.js","images/youtube_logo.svg","images/facebook_logo.svg","Footer.js","images/penta1.svg","pages/HomePage.js","components/HimnosLista.js","components/PresentacionLista.js","components/VistaHimno.js","images/engranajes.svg","images/bg.jpg","images/oraciones.jpg","images/bienvenida.jpg","images/anuncios.jpg","components/OtrosElementosLista.js","pages/CrearPage.js","components/BusquedaLista.js","components/EstrofasModificables.js","images/edit_image.svg","images/agregar_image.svg","pages/AgregarPage.js","pages/ModificarPage.js","pages/NotFoundPage.js","App.js","reportWebVitals.js","index.js"],"names":["TopNav","state","isActive","handleToggle","setState","this","Fragment","className","id","onClick","src","mainLogo","alt","to","exact","Component","Footer","youtube_logo","facebook_logo","HomePage","refColumns","useRef","penta1","current","scrollIntoView","behavior","ref","HimnosLista","props","numberOfPages","Math","ceil","himnos","length","useState","pageNumber","setPageNumber","useEffect","map","himno","index","selected","Titulo","verHimno","Id","agregarHimno","console","log","PresentacionLista","presentacion","key","tipo","bajarHimno","subirHimno","eliminarHimno","VistaHimno","titulo","Himno_Id","Numero_estrofa","Contenido","estrofas","setEstrofas","loading","setLoading","a","fetch","method","headers","result","json","body","fetchData","estrofa","contenido","replace","dangerouslySetInnerHTML","__html","type","color","height","width","OtrosElementosLista","forwardRef","otrosElementos","elemento","agregarElemento","url","CrearPage","refContainer","refBorrarTermino","otrosButton","refOtrosElementos","createRef","busqueda","setBusqueda","Cantidad_estrofas","setHimnos","setTitulo","setID","buscarContenido","setBuscarContenido","bienvenida","anuncios","setOtrosElementos","setPresentacion","compararListas","lista","forEach","fila","himnoIndex","findIndex","toggleView","event","target","classList","toggle","contains","remove","engranajes","onSubmit","preventDefault","estrofasId","Set","i","add","idArray","Array","from","name","placeholder","value","onChange","termino","isChecked","checked","selected_id","selected_titulo","selectedHimnoIndex","himnosCopy","updatedHimno","newHimno","updatedPresentacion","concat","nuevaPresentacion","pptxgen","author","subject","title","fetchArray","push","Promise","all","then","responses","response","contenidoHimnos","himnosIndex","slide","addSlide","background","path","oracionesBg","addText","x","y","h","w","fontSize","bold","align","AlignH","center","estrofaBg","left","estrofaFontSize","cantidadLineas","split","isTextBox","shrinkText","autofit","writeFile","fileName","catch","error","elementsCopy","selectedElementIndex","updatedElement","selected_tipo","selected_url","newElement","currentObject","filter","object","splice","BusquedaLista","cerrarOverlay","desplegarEstrofas","EstrofasModificables","refEstrofas","keyPressed","numberOfLines","match","which","maxLength","onKeyPress","maxRows","cols","e","updateEstrofa","handleChange","borrarEstrofa","AgregarPage","refBusquedaRes","refOverlay","refRelleno","cantidad","updated","selectedHimno","usePopup","message","confirm","cancel","agregar_image","style","display","alert","numero_estrofa","numero","ModificarPage","setSelectedHimno","modificarSelectedHimno","propiedades","valor","selectedHimnoCopy","propiedad","data","eliminarCanto","innerHTML","edit_image","window","estrofasCopy","borrarCantidad","estrofaData","himnoData","borrarData","nuevaCantidad","insertarCantidad","insertarData","currentEstrofa","estrofaIndex","NotFoundPage","App","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.28ea844e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Logo-Coronado.e500f9a1.svg\";","import React, { Component } from \"react\";\nimport { NavLink } from 'react-router-dom';\nimport mainLogo from './images/Logo-Coronado.svg';\n\nclass TopNav extends Component {\n\n    state = { isActive: false };\n\n    handleToggle = () => {\n        this.setState({ isActive: !this.state.isActive });\n    };\n\n    render() {\n        const isActive = this.state.isActive;\n        return (\n\n            <React.Fragment>\n                <div className=\"topBar\"><div id=\"menu-bars\" onClick={this.handleToggle}></div></div>\n                <nav className=\"no-mobile\">\n                    <div className=\"no-mobile-container\">\n                        <img className=\"logo\" src={mainLogo} alt=\"Logo Iglesia de Cristo en Coronado\" />\n                        <ul>\n                            <li>\n                                <NavLink to=\"/\" exact>\n                                    Inicio\n                                    <div className=\"active-line\"></div>\n                                </NavLink>\n                            </li>\n                            <li>\n                                <NavLink to=\"/crear\">\n                                    Crear\n                                    <div className=\"active-line\"></div>\n                                </NavLink>\n                            </li>\n                            <li>\n                                <NavLink to=\"/agregar\">\n                                    Agregar\n                                    <div className=\"active-line\"></div>\n                                </NavLink>\n                            </li>\n                            <li>\n                                <NavLink to=\"/modificar\">\n                                    Modificar\n                                    <div className=\"active-line\"></div>\n                                </NavLink>\n                            </li>\n                        </ul>\n                    </div>\n                </nav>\n                <nav className=\"navMobile\">\n                    <ul className={isActive ? \"active\" : \"\"}>\n                        <li>\n                            <NavLink to=\"/\" exact onClick={this.handleToggle}>\n                                Inicio\n                            </NavLink>\n                        </li>\n                        <li>\n                            <NavLink to=\"/crear\" onClick={this.handleToggle}>\n                                Crear\n                            </NavLink>\n                        </li>\n                        <li>\n                            <NavLink to=\"/agregar\" onClick={this.handleToggle}>\n                                Agregar\n                            </NavLink>\n                        </li>\n                        <li>\n                            <NavLink to=\"/modificar\" onClick={this.handleToggle}>\n                                Modificar\n                            </NavLink>\n                        </li>\n                    </ul>\n                    <img className=\"logo\" src={mainLogo} alt=\"Logo Iglesia de Cristo en Coronado\" />\n                </nav>\n            </React.Fragment>  \n        );\n    } \n}\n\nexport default TopNav;","export default __webpack_public_path__ + \"static/media/youtube_logo.88cd0fb3.svg\";","export default __webpack_public_path__ + \"static/media/facebook_logo.093b74e6.svg\";","import React, { Component } from \"react\";\nimport youtube_logo from './images/youtube_logo.svg';\nimport facebook_logo from './images/facebook_logo.svg';\n\nclass Footer extends Component {\n\n    render() {\n        return (\n            <React.Fragment>\n                <footer>\n                    <p>Iglesia de Cristo en Coronado, Costa Rica.</p>\n                    <img id=\"youtube_logo\" className=\"footer_logo\" src={youtube_logo} alt=\"Logo de Youtube\"/>\n                    <img id=\"facebook_logo\" className=\"footer_logo\" src={facebook_logo} alt=\"Logo de Facebook\"/>\n                </footer>\n            </React.Fragment>  \n        );\n    } \n}\n\nexport default Footer;","export default __webpack_public_path__ + \"static/media/penta1.ef60e11f.svg\";","import React, {useRef} from 'react';\nimport penta1 from '../images/penta1.svg';\nconst HomePage = () => {\n    const refColumns = useRef();\n    return(\n        <React.Fragment>\n            <main id=\"inicio\" className=\"mainContainer\">\n                <header>\n                    <div className=\"inicio-header\">\n                        <img id=\"penta1\" src={penta1} alt=\"imagen pentagrama y notas musicales\" />\n                        <h1>CREACIÓN DE PRESENTACIONES DE CANTOS</h1>\n                        <h3>¡Ahórrese horas de trabajo, termine en unos cuantos clicks!</h3>\n                    </div>\n                </header>\n                <div className=\"linea-divisoria\"></div>\n                <div id=\"abajo-inicio\" className=\"mas-abajo\" onClick={() => {refColumns.current.scrollIntoView({behavior: 'smooth'}); }}></div>\n                <div className=\"columnsContainer\" ref={refColumns}>\n                    <div className=\"column column1\">\n                        <section>\n                            <h2>Cientos de cantos disponibles</h2>\n                            <p>Se han agregado muchos cantos de diferentes himnarios y muchos cantos nuevos que se han aprendido aprendido a lo largo del tiempo.<br/>Con esta herramienta se puede elegir en una larga lista y crear presentaciones fácilmente en un instante.</p>\n                        </section>\n                        <section>\n                            <h2>Agregar cantos nuevos</h2>\n                            <p>Si no se encuentra algún canto existe la posibilidad de agregarlo, una vez agregado un canto este estará disponible para todos los usuarios que quieran utilizarlo en sus presentaciones.</p>\n                        </section>\n                    </div>\n                    <div className=\"column column2\">\n                        <section>\n                            <h2>Modificar cantos existentes</h2>\n                            <p>Muchas veces quienes agregamos cantos nos equivocamos pero para esos errores que encontremos también está la posibilidad de modificar cualquier canto existente.</p>\n                            <div id=\"penta2\"></div>\n                        </section>\n                    </div>\n                </div>\n            </main>\n        </React.Fragment>  \n    ); \n}\n\nexport default HomePage;","import React, { useState, useEffect } from 'react';\n\nconst HimnosLista = (props) => {\n    const maxPerPage = 16;\n    const numberOfPages = Math.ceil(props.himnos.length / maxPerPage);\n    const [pageNumber, setPageNumber] = useState(1);\n\n\n    const next = () => {\n        console.log('next');\n        if(pageNumber < numberOfPages){\n            setPageNumber(pageNumber + 1);\n        }\n    }\n\n    const prev = () => {\n        console.log('prev');\n        if(pageNumber > 1){\n            setPageNumber(pageNumber - 1);\n        }\n    }\n\n    useEffect(() => {\n        setPageNumber(1);\n    }, [numberOfPages])\n\n    return(\n        <>\n            <div id=\"lista-cantos\">\n                {props.himnos.map((himno, index) => {\n                    if(index >= (maxPerPage * pageNumber - maxPerPage) && index < (maxPerPage * pageNumber)){\n                        return(\n                            <div className={\"titulo-container\" + ((himno.selected)? \" titulo-selected\" : \"\")} key={index}>\n                                <div className=\"titulo\">\n                                    <h4>{himno.Titulo}</h4>\n                                </div>\n                                <div className=\"iconos\">\n                                    <i className=\"icono icono-ver\" onClick={() => props.verHimno(himno.Id,himno.Titulo)}></i>\n                                    <i className={\"icono icono-agregar\" + ((himno.selected)? \" icono-selected\" : \"\")} onClick={() => props.agregarHimno(himno.Id,himno.Titulo)}></i>\n                                </div>\n                            </div>\n                        )\n                    } else {\n                        return(<div key={index}></div>);\n                    }\n                })}\n                <div id=\"paginas\">\n                    <div id=\"flecha-anterior\" ><i className=\"icono icono-abajo\" onClick={prev}></i></div><h3>Página {pageNumber}/{numberOfPages}</h3><div id=\"flecha-siguiente\"><i className=\"icono icono-abajo\" onClick={next}></i></div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default HimnosLista;","import React from 'react';\n\nconst PresentacionLista = (props) => {\n\n    return(\n        <>\n        <div id=\"presentacion-cantos\">\n        {props.presentacion.map((himno, key) => (\n            <div className={\"titulo-container\" + ((himno.tipo)? \" \"+himno.tipo : \"\")} key={key}>\n                <div className=\"titulo\">\n                    <h4>{himno.Titulo}</h4>\n                </div>\n                <div className=\"iconos\">\n                    <i className=\"icono icono-abajo\" onClick={() => props.bajarHimno(himno.Id)}></i>\n                    <i className=\"icono icono-arriba\" onClick={() => props.subirHimno(himno.Id)}></i>\n                    <i className=\"icono icono-cerrar\" onClick={() => props.eliminarHimno(himno.Id)}></i>\n                </div>\n            </div>\n        ))}\n        </div>\n        </>\n    );\n};\n\nexport default PresentacionLista;","import React, { useState, useEffect} from 'react';\nimport Loader from \"react-loader-spinner\";\n\nconst VistaHimno = ({ titulo, id }) => {\n\n    const [estrofas, setEstrofas] = useState([{ Himno_Id: 1, Numero_estrofa: 1, Contenido: \"\" }]);\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        setLoading(true);\n        const fetchData = async () => {\n            const result = await fetch('/api/obtenerestrofas?id='+id, {\n                method: 'get',\n                headers: {\n                    'Content-Type': 'application/json',\n                }\n            });\n            const body = await result.json();\n            setEstrofas(body);\n            setLoading(false);\n        }\n        fetchData();\n    }, [id]);\n\n\n    return(\n        <div className=\"preview-container\">\n            <h1 id=\"titulo-canto\">{titulo}</h1>\n            {estrofas.map((estrofa, key) => { \n                var contenido = (estrofa.Contenido.replace(/(?:\\r\\n|\\r|\\n)/g, '<br>'));\n                return(\n                <div className=\"estrofa\" key={key} dangerouslySetInnerHTML={{__html: contenido}}>\n                </div>\n            )})}\n            <i id=\"close-preview\" className=\"icono icono-cerrar\"></i>\n            <Loader className={\"loader\" + (loading?\" visible\":\"\")}  type=\"ThreeDots\" color=\"#80B041\" height={80} width={80} />\n        </div>\n    );\n};\n\nexport default VistaHimno;","export default __webpack_public_path__ + \"static/media/engranajes.cd2fbc6a.svg\";","export default __webpack_public_path__ + \"static/media/bg.f3c89965.jpg\";","export default __webpack_public_path__ + \"static/media/oraciones.f14a4c4f.jpg\";","export default __webpack_public_path__ + \"static/media/bienvenida.f9810c9a.jpg\";","export default __webpack_public_path__ + \"static/media/anuncios.f56f7a1d.jpg\";","import React, { forwardRef } from 'react';\n\nconst OtrosElementosLista = forwardRef((props, ref) => {\n    return(\n        <>\n        <div ref={ref} id=\"lista-elementos\">\n        {props.otrosElementos.map((elemento, key) => (\n            <div className={\"titulo-container\" + ((elemento.selected)? \" titulo-selected\" : \"\")} key={key} onClick={() => props.agregarElemento(elemento.Id,elemento.Titulo,elemento.tipo,elemento.url)}>\n                <div className=\"titulo\">\n                    <h4>{elemento.Titulo}</h4>\n                </div>\n                <div className=\"iconos-ele\">\n                    <i className={\"icono icono-agregar\" + ((elemento.selected)? \" icono-selected\" : \"\")}></i>\n                </div>\n            </div>\n        ))}\n        </div>\n        </>\n    );\n});\n\nexport default OtrosElementosLista;","import React, { useState, useEffect, useRef, createRef} from 'react';\nimport pptxgen from \"pptxgenjs\";\nimport HimnosLista from '../components/HimnosLista';\nimport PresentacionLista from '../components/PresentacionLista';\nimport VistaHimno from '../components/VistaHimno';\nimport engranajes from '../images/engranajes.svg';\nimport estrofaBg from '../images/bg.jpg';\nimport oracionesBg from '../images/oraciones.jpg';\nimport bienvenida from '../images/bienvenida.jpg';\nimport anuncios from '../images/anuncios.jpg';\nimport OtrosElementosLista from '../components/OtrosElementosLista';\nimport Loader from \"react-loader-spinner\";\n\nconst CrearPage = () => {\n    const refColumns = useRef();\n    const refContainer = useRef();\n    const refBorrarTermino = useRef();\n    const otrosButton = useRef();\n    const refOtrosElementos = createRef();\n    const [loading, setLoading] = useState(false);\n    const [busqueda, setBusqueda] = useState(\"\");\n    const [himnos, setHimnos] = useState([{ Id: 0, Titulo: \"\", Cantidad_estrofas: 0, selected: false }]);\n    const [titulo, setTitulo] = useState(\"\");\n    const [id, setID] = useState(1);\n    const [buscarContenido, setBuscarContenido] = useState(false);\n    const [otrosElementos, setOtrosElementos] = useState([\n        {tipo: \"imagen\", Titulo: \"Bienvenida\", Id: \"i1\", url: bienvenida},\n        {tipo: \"oracion\", Titulo:\"Oración Inicial\", Id: \"o1\"},\n        {tipo: \"oracion\", Titulo:\"Cena\", Id: \"o2\"},\n        {tipo: \"oracion\", Titulo:\"Ofrenda\", Id: \"o3\"},\n        {tipo: \"oracion\", Titulo:\"Predicación\", Id: \"p1\"},\n        {tipo: \"oracion\", Titulo:\"Meditación\", Id: \"p2\"},\n        {tipo: \"oracion\", Titulo:\"Oración Final\", Id: \"o4\"},\n        {tipo: \"imagen\", Titulo: \"Anuncios\", Id: \"i2\", url: anuncios}]);\n    const [presentacion, setPresentacion] = useState([]);\n\n    const compararListas = (lista) => {\n        console.log(\"comparando listas...\");\n        presentacion.forEach((fila) => {\n            let himnoIndex = lista.findIndex(himno => himno.Id === fila.Id);\n            if(himnoIndex !== -1)lista[himnoIndex].selected = true; \n        });\n        return lista;\n    }\n\n    const buscarHimno = (event) => {\n        event.preventDefault();\n        setLoading(true);\n        //Buscar solo en los títulos de los himnos.\n        if(!buscarContenido){\n            if(busqueda.length > 0){\n                const fetchData = async () => {\n                    const result = await fetch('api/buscartitulos?term='+ busqueda, {\n                        method: 'get',\n                        headers: {\n                            'Content-Type': 'application/json',\n                        }\n                    });\n                    const body = await result.json();\n                    setHimnos(compararListas(body));\n                    setLoading(false);\n                }\n                fetchData();\n            //Si no hay nada en el campo buscar entonces se devuelven \n            //todos los himnos que existen en la Base de datos.\n            } else {\n                const fetchData = async () => {\n                    const result = await fetch('api/himnos');\n                    const body = await result.json();\n                    setHimnos(compararListas(body));\n                    setLoading(false);\n                }\n                fetchData();\n            }\n        //Buscar en los títulos de los himnos y también en la letra.\n        } else {\n            const estrofasId = new Set();\n            let url = \"\";\n            const fetchData = async () => {\n                const result = await fetch('/api/buscarenestrofas?term='+ busqueda, {\n                    method: 'get',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    }\n                });\n                const body = await result.json();\n                for(var i=0; i < body.length; i++){\n                    estrofasId.add(body[i].Himno_Id);\n                }\n                let idArray = Array.from(estrofasId);\n                for(i = 0; i < idArray.length; i++){\n                    url+= \"&array[]=\" + idArray[i];\n                }\n\n                const fetchData = async () => {\n                    const result = await fetch('api/buscarencontenido?term='+ busqueda + url, {\n                        method: 'get',\n                        headers: {\n                            'Content-Type': 'application/json',\n                        }\n                    });\n                    const body = await result.json();\n                    setHimnos(compararListas(body));\n                    setLoading(false);\n                }\n                fetchData();\n            }\n            fetchData();\n        }\n    }\n\n    const checkboxChange = (event) => {\n        let isChecked = event.target.checked;\n        setBuscarContenido(isChecked);\n    }\n\n    const busquedaChange = (event) => {\n        const termino = event.target.value;\n        setBusqueda(termino)\n        if(termino.length > 0){\n            refBorrarTermino.current.classList.add('visible');\n        } else {\n            refBorrarTermino.current.classList.remove('visible');\n        }\n        \n    }\n\n    const borrarBusqueda = () => {\n        setLoading(true);\n        setBusqueda(\"\");\n        refBorrarTermino.current.classList.remove('visible');\n        const fetchData = async () => {\n            const result = await fetch('api/himnos');\n            const body = await result.json();\n            setHimnos(compararListas(body));\n            setLoading(false);\n        }\n        fetchData();\n    }\n    \n    const verHimno = (selected_id,selected_titulo) => {\n        setID(selected_id);\n        setTitulo(selected_titulo);\n        toggleView();\n    } \n\n    const agregarHimno = (selected_id,selected_titulo) => {\n        let selectedHimnoIndex = himnos.findIndex(himno => himno.Id === selected_id);\n        let himnosCopy = [...himnos];\n        let updatedHimno = {...himnosCopy[selectedHimnoIndex]};\n        \n        if(!updatedHimno.selected){\n            updatedHimno.selected = true;\n            himnosCopy[selectedHimnoIndex] = updatedHimno;\n            setHimnos(himnosCopy);\n\n            let newHimno = [{ Id: selected_id, Titulo: selected_titulo}];\n            let currentPresentacion = [...presentacion];\n            const updatedPresentacion = currentPresentacion.concat(newHimno);\n            setPresentacion(updatedPresentacion);\n        }\n    }\n\n    const agregarElemento = (selected_id, selected_titulo, selected_tipo, selected_url) => {\n        let selectedElementIndex = otrosElementos.findIndex(elemento => elemento.Id === selected_id);\n        let elementsCopy = [...otrosElementos];\n        let updatedElement = {...elementsCopy[selectedElementIndex]};\n        let newElement =[{ Id: selected_id, Titulo: selected_titulo, tipo: selected_tipo, url:selected_url}];;\n        \n        if(!updatedElement.selected){\n            updatedElement.selected = true;\n            elementsCopy[selectedElementIndex] = updatedElement;\n            setOtrosElementos(elementsCopy);\n            \n            let currentPresentacion = [...presentacion];\n            const updatedPresentacion = currentPresentacion.concat(newElement);\n            setPresentacion(updatedPresentacion);\n        }\n    }\n\n    const bajarHimno = (selected_id) => {\n        let selectedHimnoIndex = presentacion.findIndex(himno => himno.Id === selected_id);\n        if(selectedHimnoIndex < (presentacion.length -1)){\n            let currentObject = presentacion[selectedHimnoIndex];\n            let updatedPresentacion = presentacion.filter( object => object.Id !== selected_id);\n            updatedPresentacion.splice(selectedHimnoIndex + 1, 0, currentObject)\n            setPresentacion(updatedPresentacion);\n        }\n    }\n    const subirHimno = (selected_id) => {\n        let selectedHimnoIndex = presentacion.findIndex(himno => himno.Id === selected_id);\n        if(selectedHimnoIndex > 0){\n            let currentObject = presentacion[selectedHimnoIndex];\n            let updatedPresentacion = presentacion.filter( object => object.Id !== selected_id);\n            updatedPresentacion.splice(selectedHimnoIndex - 1, 0, currentObject)\n            setPresentacion(updatedPresentacion);\n        }\n    }\n    const eliminarHimno = (selected_id) => {\n        let updatedPresentacion = presentacion.filter( object => object.Id !== selected_id);\n        setPresentacion(updatedPresentacion);\n\n        let selectedHimnoIndex = himnos.findIndex(himno => himno.Id === selected_id);\n        let himnosCopy = [...himnos];\n        let updatedHimno = {...himnosCopy[selectedHimnoIndex]};\n        updatedHimno.selected = false;\n        himnosCopy[selectedHimnoIndex] = updatedHimno;\n        setHimnos(himnosCopy);\n\n        let selectedElementIndex = otrosElementos.findIndex(elemento => elemento.Id === selected_id);\n        let elementsCopy = [...otrosElementos];\n        let updatedElement = {...elementsCopy[selectedElementIndex]};\n        updatedElement.selected = false;\n        elementsCopy[selectedElementIndex] = updatedElement;\n        setOtrosElementos(elementsCopy);\n    }\n\n    const toggleView = (event) => {\n        if(!event) {\n            refContainer.current.classList.toggle('visible');\n        } else if(event.target.id === \"himno-overlay\" || event.target.id === \"close-preview\"){\n            refContainer.current.classList.toggle('visible');\n        }\n    }\n\n    const borrarPresentacion = () => {\n        let himnosCopy = [...himnos];\n        let elementsCopy = [...otrosElementos];\n        presentacion.forEach((fila) => {\n            if(!fila.tipo){\n                let selectedHimnoIndex = himnos.findIndex(himno => himno.Id === fila.Id);\n                let updatedHimno = {...himnosCopy[selectedHimnoIndex]};\n                updatedHimno.selected = false;\n                himnosCopy[selectedHimnoIndex] = updatedHimno;\n            } else {\n                let selectedElementIndex = otrosElementos.findIndex(elemento => elemento.Id === fila.Id);\n                let updatedElement = {...elementsCopy[selectedElementIndex]};\n                updatedElement.selected = false;\n                elementsCopy[selectedElementIndex] = updatedElement;\n            }\n        });\n        setOtrosElementos(elementsCopy);\n        setHimnos(himnosCopy);\n        setPresentacion([]);\n    }\n\n    const crearPresentacion = () => {\n        setLoading(true);\n        if(presentacion.length > 0){\n            let nuevaPresentacion = new pptxgen();\n            nuevaPresentacion.author = 'Creador de presentaciones';\n            nuevaPresentacion.subject = 'Presentación de cantos';\n            nuevaPresentacion.title = 'Presentación de cantos';\n            let fetchArray = [];\n            for(let i = 0; i < presentacion.length; i++){\n                if(! presentacion[i].tipo)\n                fetchArray.push(fetch('api/obtenerestrofas?id=' + presentacion[i].Id));\n            }\n            Promise.all(fetchArray)\n            .then((responses) => {\n                return Promise.all(responses.map((response) => {\n                    return response.json();\n                }));\n            })\n            .then((contenidoHimnos) => {\n                let himnosIndex = 0;\n                presentacion.forEach((fila, index) => {\n                    let slide = nuevaPresentacion.addSlide();\n                    if(!fila.tipo){\n                        slide.background = { path : oracionesBg};\n                        slide.addText(\n                            fila.Titulo,\n                            {\n                                x: 0,\n                                y: 1.51,\n                                h: 2.61,\n                                w: \"100%\",\n                                color: 'FFFFFF',\n                                fontSize: 60,\n                                bold: true,\n                                align: nuevaPresentacion.AlignH.center\n                            }\n                        );\n                        let himno = contenidoHimnos[himnosIndex];\n                        himno.forEach( (estrofa, i) => {\n                            slide = nuevaPresentacion.addSlide();\n                            slide.background = { color : \"000000\"};\n                            slide.background = { path : estrofaBg};\n                            slide.addText(\n                                estrofa.Numero_estrofa,\n                                {\n                                    x: 0.08,\n                                    y: 0,\n                                    w: 0.5,\n                                    h: 0.5,\n                                    color: 'FFFFFF',\n                                    align: nuevaPresentacion.AlignH.left\n                                }\n                            );\n                            let estrofaFontSize = 50;\n                            let contenido = estrofa.Contenido.replace(/[\\r\\n]+$/, '');\n                            let cantidadLineas = contenido.split(/\\r\\n|\\r|\\n/).length;\n                            if(cantidadLineas >= 6 && cantidadLineas < 8) estrofaFontSize = 46;\n                            else if(cantidadLineas > 7 ) estrofaFontSize = 40;\n                            else estrofaFontSize = 50;\n                            slide.addText(\n                                contenido,\n                                {\n                                    isTextBox: true,\n                                    shrinkText: true,\n                                    autofit: true,\n                                    x: 0,\n                                    y: 0,\n                                    w: \"100%\",\n                                    h: \"100%\",\n                                    fontSize: estrofaFontSize,\n                                    color: 'FFFFFF',\n                                    align: nuevaPresentacion.AlignH.center\n                                }\n                            );\n                            if(i === himno.length - 1){\n                                slide.addText(\n                                    \"Fin\",\n                                    {\n                                        x: 9.42,\n                                        y: 5.145,\n                                        w: 0.54,\n                                        h: 0.42,\n                                        color: 'FFFFFF',\n                                        align: nuevaPresentacion.AlignH.left\n                                    }\n                                );\n                            }\n                        });\n                        himnosIndex += 1;\n                    } else if(fila.tipo === \"oracion\"){\n                        slide.background = { path : oracionesBg};\n                        slide.addText(\n                            fila.Titulo,\n                            {\n                                x: 0,\n                                y: 1.51,\n                                h: 2.61,\n                                w: \"100%\",\n                                color: 'FFFFFF',\n                                fontSize: 60,\n                                bold: true,\n                                align: nuevaPresentacion.AlignH.center\n                            }\n                        );\n                    } else if(fila.tipo === \"imagen\"){\n                        if(fila.Titulo === \"Bienvenida\")\n                            slide.background = { path : bienvenida};\n                        else \n                        slide.background = { path : anuncios};\n                    }\n                });\n                nuevaPresentacion.writeFile({fileName: \"Presentacion de prueba.pptx\"});\n                setLoading(false);\n            })\n            .catch((error) => {\n                console.error(error);\n            });\n        }\n    }\n\n    const ocultarMostrarListaElementos = () => {\n        refOtrosElementos.current.classList.toggle('visible');\n    }\n  \n    useEffect(() => {\n        setLoading(true);\n        const fetchData = async () => {\n            const result = await fetch('api/himnos');\n            const body = await result.json();\n            setHimnos(body);\n            setLoading(false);\n        }\n        fetchData();\n\n    }, []);\n\n    const checkClickArea = (event) => {\n        //console.log\n        if (!refOtrosElementos.current.contains(event.target) && !otrosButton.current.contains(event.target)){\n            refOtrosElementos.current.classList.remove('visible');\n        } \n    }\n\n    return(\n        <React.Fragment>\n            <main id=\"crearContainer\" className=\"mainContainer\" onClick={checkClickArea}>\n                <header className=\"two-columns\">\n                    <div className=\"header-container\">\n                        <div className=\"header-left\">\n                        </div>\n                        <div className=\"header-right\">\n                            <img id=\"engranajes\" className=\"image-header\" src={engranajes} alt=\"\" />\n                        </div>  \n                    </div>  \n                    <div className=\"mas-abajo\" onClick={() => {refColumns.current.scrollIntoView({behavior: 'smooth'}); }}></div>\n                </header>\n                <div className=\"linea-divisoria\"></div>\n                <div className=\"columnsContainer\" ref={refColumns}>\n                    <div className=\"column column1\">\n                        <section>\n                            <h2>Lista de cantos disponibles</h2>\n                            <form onSubmit={buscarHimno}>\n                                <div id=\"buscar-container\">\n                                    <button type=\"submit\"><i className=\"icono icono-buscar\"></i></button>\n                                    <input type=\"text\" name=\"search\" placeholder=\"Buscar Canto\" value={busqueda} onChange={busquedaChange}/>\n                                    <div onClick={borrarBusqueda}><i id=\"borrar-termino\" className=\"icono icono-cerrar\" ref={refBorrarTermino}></i></div>\n                                </div>\n                                <label>\n                                Buscar en contenido <input type=\"checkbox\" onChange={checkboxChange}/>\n                                </label>\n                            </form>\n                            <HimnosLista himnos={himnos} verHimno={verHimno} agregarHimno={agregarHimno}/>\n                        </section>\n                    </div>\n                    <div className=\"column column2\">\n                        <section>\n                            <h2>Lista de elementos en la presentación</h2>\n                            <div id=\"iconos-presentacion\">\n                                <div className=\"icono\">\n                                    <i ref={otrosButton} className=\"icono-crear\" onClick={ocultarMostrarListaElementos}></i>\n                                    Otros\n                                </div>\n                                <div className=\"icono\">\n                                    <i className=\"icono-descargar\" onClick={crearPresentacion}></i>\n                                    Descargar\n                                </div>\n                                <div className=\"icono\">\n                                    <i className=\"icono-borrar-todo\" onClick={borrarPresentacion}></i>\n                                    Borrar lista\n                                </div>\n                            </div>\n                            <OtrosElementosLista ref={refOtrosElementos} otrosElementos={otrosElementos} agregarElemento={agregarElemento}/>\n                            <PresentacionLista presentacion={presentacion} bajarHimno={bajarHimno} subirHimno={subirHimno} eliminarHimno={eliminarHimno}/>\n                        </section>\n                    </div>\n                </div>\n                <div ref={refContainer} id=\"himno-overlay\" onClick={toggleView}>\n                    <VistaHimno titulo={titulo} id={id}/>\n                </div>\n                \n            </main>\n            <Loader className={\"loader\" + (loading?\" visible\":\"\")}  type=\"ThreeDots\" color=\"#ACD25D\" height={80} width={80} />\n        </React.Fragment>   \n    );\n};\n\nexport default CrearPage;","import React, { forwardRef } from 'react';\n\nconst BusquedaLista = forwardRef((props, ref) => {\n    return(\n        <>\n        <div ref={ref} id=\"lista-busqueda\">\n            <i className=\"icono icono-cerrar\" onClick={props.cerrarOverlay}></i>\n            <p>Hay más de un canto que coincide con su busqueda por favor</p>\n            <h3>Elija el canto que desea modificar.</h3>\n            {props.himnos.map((elemento, key) => (\n                <div className={\"titulo-container\" + ((elemento.selected)? \" titulo-selected\" : \"\")} key={key} onClick={() => props.desplegarEstrofas(elemento.Id,elemento.Titulo)}>\n                    <div className=\"titulo\">\n                        <h4>{elemento.Titulo}</h4>\n                    </div>\n                    <div className=\"iconos-ele\">\n                        <i className={\"icono icono-agregar\" + ((elemento.selected)? \" icono-selected\" : \"\")}></i>\n                    </div>\n                </div>\n            ))}\n        </div>\n        </>\n    );\n});\n\nexport default BusquedaLista;","import React, {useRef} from 'react';\nimport TextareaAutosize from 'react-textarea-autosize';\n\nconst EstrofasModificables = (props) => {\n    const refEstrofas = useRef();\n\n    const handleChange = (estrofa, e) => {\n        props.updateEstrofa(estrofa.Numero_estrofa, e)\n    }\n\n    const keyPressed = (event) => {\n        var textarea = event.target,\n            text = textarea.value,\n            numberOfLines = (text.match(/\\n/g) || []).length + 1,\n            maxRows = 8;\n            console.log(numberOfLines);\n        if (event.which === 13 && numberOfLines >= maxRows ) {\n          event.preventDefault();\n          return false;\n        }\n    }\n    return(\n        <>\n            <div id=\"estrofas-inputs\" ref={refEstrofas}>\n                {props.estrofas.map((estrofa, key) => (\n                    <div className=\"textarea-container\" key={key}>\n                        <TextareaAutosize maxLength=\"272\" onKeyPress={keyPressed} className=\"estrofa-textarea\" maxRows=\"8\" cols=\"32\" value={estrofa.Contenido} onChange={(e) => handleChange(estrofa, e)} />\n                        <h4>Diapositiva {estrofa.Numero_estrofa}</h4>\n                        <i className=\"icono icono-cerrar\" onClick={() => props.borrarEstrofa(estrofa.Numero_estrofa)}></i>\n                    </div>\n                ))}\n            </div>\n        </>\n    );\n};\n\nexport default EstrofasModificables;","export default __webpack_public_path__ + \"static/media/edit_image.d4c1872c.svg\";","export default __webpack_public_path__ + \"static/media/agregar_image.555e06bf.svg\";","import React, { useState, createRef, useRef} from 'react';\nimport BusquedaLista from '../components/BusquedaLista';\nimport EstrofasModificables from '../components/EstrofasModificables';\nimport edit_image from '../images/edit_image.svg';\nimport Loader from \"react-loader-spinner\";\nimport { usePopup } from 'react-hook-popup';\nimport agregar_image from '../images/agregar_image.svg';\nconst AgregarPage = () => {\n    const refColumns = useRef();\n    const refBusquedaRes = createRef();\n    const refOverlay = useRef();\n    const refRelleno = useRef();\n    const [selectedHimno, setSelectedHimno] = useState([{id: 0, titulo:\"\", cantidad: 0, updated: false}]);\n    const [loading, setLoading] = useState(false);\n    const [busqueda, setBusqueda] = useState(\"\");\n    const [himnos, setHimnos] = useState([{ Id: 0, Titulo: \"\", Cantidad_estrofas: 0, selected: false }]);\n    const [estrofas, setEstrofas] = useState([]);\n    const [buscarContenido, setBuscarContenido] = useState(false);\n    const [confirm] = usePopup('confirm', ({ message, confirm, cancel }) => (\n        <div className=\"confirm-modal\">\n            ¿Está seguro que desea ELIMINAR el canto <br/>\"{selectedHimno[0].titulo}\"?<br/><span>Después de eliminar un canto este ya no estará disponible.</span>\n            <button className=\"aceptar-btn\" onClick={confirm}>Eliminar</button>\n            <button className=\"cancelar-btn\" onClick={cancel}>Cancelar</button>\n        </div>\n    ));\n\n\n    //Buscar los himnos que coincidan con el texto de busqueda cuando el botón buscar es presionado.\n    const verificarTitulo = (event) => {\n        event.preventDefault();\n        setLoading(true);\n        //Buscar solo en los títulos de los himnos.\n        if(busqueda.length > 0){\n            fetch('api/buscartitulo?term='+ busqueda, {\n                    method: 'get',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    }\n                })\n            .then(response => response.json())\n            .then(result => {\n                setLoading(false);\n                if(result.length > 1){\n                    refOverlay.current.style.display = \"block\";\n                    setHimnos(result);\n                } else if(result.length > 0){\n                    desplegarEstrofas(result[0].Id, result[0].Titulo);\n                } else {\n                    alert(\"No hay ningún título que coincida.\");\n                    setLoading(false);\n                }\n            })\n            .catch((error) => {\n                console.error(error);\n                alert(\"¡Error en la conexión!\");\n                setLoading(false);\n            });\n        } else {\n            alert(\"La busqueda está vacía. Digite algun texto para buscar.\");\n            setLoading(false);\n        }\n    }\n\n    const busquedaChange = (event) => {\n        const termino = event.target.value;\n        setBusqueda(termino);\n    }\n\n    const desplegarEstrofas = (selected_id,selected_titulo) => {\n        console.log(\"desplegar estrofas...\");\n        // setLoading(true);\n        // refRelleno.current.style.display = \"none\";\n        // fetch('api/obtenerestrofas?id='+ selected_id)\n        // .then(response => response.json())\n        // .then(data => {\n        //     setEstrofas(data); \n        //     setLoading(false);\n        // })\n        // .catch(error => console.error(error));\n        // setBusqueda(selected_titulo);\n        // refOverlay.current.style.display = \"none\";\n    }\n\n    const updateEstrofa = (numero_estrofa, event) => {\n        console.log(\"actualizar estrofa...\");\n        // let estrofasCopy = [...estrofas];\n        // let currentEstrofa = event.target.value;\n        // estrofasCopy[numero_estrofa - 1].Contenido = currentEstrofa;\n        // estrofasCopy[numero_estrofa - 1].updated = true;\n        // setEstrofas(estrofasCopy);\n    }\n\n    const borrarEstrofa = (numero) => {\n        console.log(\"borrar estrofa...\");\n        // if(estrofas.length > 1){\n        //     let estrofaIndex = numero - 1;\n        //     console.log(\"estrofa index: \" + estrofaIndex);\n        //     let estrofasCopy = [...estrofas];\n        //     estrofasCopy.splice(estrofaIndex, 1);\n\n        //     estrofasCopy.forEach((estrofa) => {\n        //         if(estrofa.Numero_estrofa >= estrofaIndex + 1){\n        //             estrofa.Numero_estrofa -= 1;\n        //             estrofa.updated = true;\n        //         }\n        //     });\n        //     modificarSelectedHimno([\"updated\"], [true]);\n        //     setEstrofas(estrofasCopy);\n        // } else {\n        //     alert(\"No se puede elminar. Cada himno debe tener mínimo una estrofa.\");\n        // }\n        \n    }\n\n    const nuevaDiapositiva = () => {\n        console.log(\"nueva diapositiva...\");\n        // let estrofasCopy = [...estrofas];\n        // estrofasCopy.push({Himno_Id: estrofasCopy[0].Himno_Id, Numero_estrofa: estrofasCopy.length + 1, Contenido: \"\"});\n        // setEstrofas(estrofasCopy);\n    }\n\n    const borrarContenido = () => {\n        console.log(\"borrar contenido...\");\n    }\n\n    const guardarCanto = () => {\n        console.log(\"guardar canto...\");\n        // console.log(selectedHimno[0].cantidad);\n        // if(selectedHimno[0].cantidad > 0){\n        //     setLoading(true);\n\n        //     let fetchArray = [];\n        //     let estrofaData = {};\n        //     let himnoData = {titulo: selectedHimno[0].titulo, cantidad: estrofas.length, id: estrofas[0].Himno_Id};\n        //     let borrarCantidad;\n        //     //Borrar estrofas si es necesario, se borra de la última hacia atras.\n        //     if(selectedHimno[0].cantidad > estrofas.length){\n        //         borrarCantidad = selectedHimno[0].cantidad - estrofas.length;\n        //         for(var i = 0; i < borrarCantidad; i++){\n        //             let borrarData = {id: himnoData.id, numero: selectedHimno[0].cantidad - i}\n        //             // fetchArray.push(\n        //             //     fetch('api/borrarestrofa', {\n        //             //         method: 'delete',\n        //             //         headers: {\n        //             //             'Content-Type': 'application/json',\n        //             //         },\n        //             //         body: JSON.stringify(borrarData)\n        //             //     })\n        //             // );\n        //             console.log(\"estrofa: \" + borrarData.numero + \" de \" + selectedHimno[0].cantidad + \" ha sido borrada.\");\n        //         }\n\n        //         let nuevaCantidad = selectedHimno[0].cantidad - borrarCantidad;\n        //         modificarSelectedHimno([\"cantidad\"], [nuevaCantidad]);\n        //     //Insertar nuevas diapositivas\n        //     } else if(selectedHimno[0].cantidad < estrofas.length){\n        //         let insertarCantidad =  estrofas.length - selectedHimno[0].cantidad;\n        //         for(i = 1; i <= insertarCantidad; i++){\n        //             let numero_estrofa = selectedHimno[0].cantidad + i;\n        //             let insertarData = {id: himnoData.id, numero: numero_estrofa, contenido: estrofas[numero_estrofa - 1].Contenido}\n        //             // fetchArray.push(\n        //             //     fetch('api/insertarestrofa', {\n        //             //         method: 'post',\n        //             //         headers: {\n        //             //             'Content-Type': 'application/json',\n        //             //         },\n        //             //         body: JSON.stringify(insertarData)\n        //             //     })\n        //             // );\n        //             console.log(\"La estrofa: \" + insertarData.numero + \" fue agregada. Contenido: \", insertarData.contenido);\n        //             let estrofasCopy = [...estrofas];\n        //             estrofasCopy[numero_estrofa - 1].updated = false;\n        //             setEstrofas(estrofasCopy);\n        //         }\n\n        //         let nuevaCantidad = selectedHimno[0].cantidad + insertarCantidad;\n        //         modificarSelectedHimno([\"cantidad\"], [nuevaCantidad]);\n        //     }\n        //     //Actualizar todas las diapositivas que hayan sido actualizadas.\n        //     if(selectedHimno[0].updated){\n        //         // fetchArray.push(\n        //         //     fetch('api/actualizartitulo', {\n        //         //             method: 'post',\n        //         //             headers: {\n        //         //                 'Content-Type': 'application/json',\n        //         //             },\n        //         //             body: JSON.stringify(himnoData)\n        //         //         })\n        //         // );\n        //         console.log(\"El himno ha sido actualizado.\", himnoData);\n        //         modificarSelectedHimno([\"updated\"], [false]);\n        //     } else {\n        //         console.log(\"El himno NO ha sido actualizado\");\n        //     }\n\n        //     let estrofasCopy = [...estrofas];\n        //     estrofasCopy.forEach(estrofa => {\n        //         if(estrofa.updated){\n        //             estrofaData = {id: estrofa.Himno_Id, numero: estrofa.Numero_estrofa, contenido: estrofa.Contenido}\n        //             // fetchArray.push(\n        //             //     fetch('api/actualizarestrofa', {\n        //             //             method: 'post',\n        //             //             headers: {\n        //             //                 'Content-Type': 'application/json',\n        //             //             },\n        //             //             body: JSON.stringify(estrofaData)\n        //             //         })\n        //             // );\n        //             console.log(\"La estrofa: \" + estrofaData.numero + \" ha sido actualizada.\");\n        //             estrofa.updated = false;\n        //         } else {\n        //             console.log(\"La estrofa:\" + estrofa.Numero_estrofa + \" NO ha sido actualizado\");\n        //         }\n\n        //     });\n            \n        //     // Promise.all(fetchArray)\n        //     // .then(() => {\n        //     //     alert(\"El canto ha sido actualizado.\");\n        //     //     setLoading(false);\n        //     // })\n        //     // .catch((error) => {\n        //     //     console.error(error);\n        //     //     setLoading(false);\n        //     // });\n\n        //     //let estrofasData = {id: estrofas[0].Himno_Id}\n        //     // console.log(data);\n        //     // const fetchData = async () => {\n        //     //     const result = await fetch('api/actualizartitulo', {\n        //     //         method: 'post',\n        //     //         headers: {\n        //     //             'Content-Type': 'application/json',\n        //     //         },\n        //     //         body: JSON.stringify(data)\n        //     //     });\n        //     //     const body = await result.json();\n        //     //     setHimnos(body);\n        //         setLoading(false);\n        //     // }\n        //     // fetchData();\n        // } else {\n        //     alert(\"No hay nada que guardar.\");\n        // }\n        \n    }\n\n    const cerrarOverlay = () => {\n        refOverlay.current.style.display = \"none\";\n    }\n\n    return(\n        <React.Fragment>\n            <main id=\"agregarContainer\" className=\"mainContainer\">\n                <header className=\"two-columns\">\n                    <div className=\"header-container\">\n                            <div className=\"header-left\">\n                            </div>\n                            <div className=\"header-right\">\n                                <img id=\"agregar\" className=\"image-header\" src={agregar_image} alt=\"\" />\n                            </div>  \n                        </div>  \n                        <div className=\"mas-abajo\" onClick={() => {refColumns.current.scrollIntoView({behavior: 'smooth'}); }}></div>    \n                </header>\n                <div className=\"linea-divisoria\"></div>\n                <div className=\"columnsContainer\" ref={refColumns}>\n                    <div className=\"column column1\">\n                        <section>\n                            <form onSubmit={verificarTitulo}>\n                                <div className=\"titulo-modificar\">\n                                    <h2>Título:</h2>\n                                    <div className=\"buscar-container\">\n                                        <input type=\"text\" name=\"search\" placeholder=\"Buscar Canto\" value={busqueda} onChange={busquedaChange}/>\n                                    </div>\n                                </div>\n                                <button type=\"submit\">Verificar</button>\n                            </form>\n                        </section>\n                    </div>\n                    <div className=\"column column2\">\n                        <section>\n                            <h2 className=\"cantidad-header\">Cantidad de estrofas:</h2>\n                            <div className=\"numero\">{estrofas.length}</div>\n                            <div id=\"add-icons\">\n                            <div className=\"guardar-container\" onClick={nuevaDiapositiva}>\n                                    <i className=\"icono-nueva\"></i>\n                                    Nueva Diapositiva\n                                </div>\n                                <div className=\"guardar-container\" onClick={guardarCanto}>\n                                    <i className=\"icono-salvar\"></i>\n                                    Guardar Canto\n                                </div>\n                                <div className=\"guardar-container\" onClick={borrarContenido}>\n                                    <i className=\"icono-borrar-todo\"></i>\n                                    Borrar todo\n                                </div>\n                            </div>\n                        </section>\n                    </div>\n                    \n                </div>\n            <div className=\"overlay\" ref={refOverlay}>\n                <BusquedaLista ref={refBusquedaRes} himnos={himnos} desplegarEstrofas={desplegarEstrofas} cerrarOverlay={cerrarOverlay}/>\n            </div>\n            <EstrofasModificables estrofas={estrofas} updateEstrofa={updateEstrofa} borrarEstrofa={borrarEstrofa}/>\n            <div ref={refRelleno} className=\"relleno\"><h1>Escoja un título y agregue diapositivas.</h1></div>\n            </main>\n            <Loader className={\"loader\" + (loading?\" visible\":\"\")}  type=\"ThreeDots\" color=\"#80B041\" height={80} width={80} />\n        </React.Fragment>   \n    )\n}\n\nexport default AgregarPage;","import React, { useState, createRef, useRef} from 'react';\nimport BusquedaLista from '../components/BusquedaLista';\nimport EstrofasModificables from '../components/EstrofasModificables';\nimport edit_image from '../images/edit_image.svg';\nimport Loader from \"react-loader-spinner\";\nimport { usePopup } from 'react-hook-popup';\n\nconst ModificarPage = () => {\n    const refColumns = useRef();\n    const refBusquedaRes = createRef();\n    const refOverlay = useRef();\n    const refRelleno = useRef();\n    const [selectedHimno, setSelectedHimno] = useState([{id: 0, titulo:\"\", cantidad: 0, updated: false}]);\n    const [loading, setLoading] = useState(false);\n    const [busqueda, setBusqueda] = useState(\"\");\n    const [himnos, setHimnos] = useState([{ Id: 0, Titulo: \"\", Cantidad_estrofas: 0, selected: false }]);\n    const [estrofas, setEstrofas] = useState([]);\n    const [buscarContenido, setBuscarContenido] = useState(false);\n    const [confirm] = usePopup('confirm', ({ message, confirm, cancel }) => (\n        <div className=\"confirm-modal\">\n            ¿Está seguro que desea ELIMINAR el canto <br/>\"{selectedHimno[0].titulo}\"?<br/><span>Después de eliminar un canto este ya no estará disponible.</span>\n            <button className=\"aceptar-btn\" onClick={confirm}>Eliminar</button>\n            <button className=\"cancelar-btn\" onClick={cancel}>Cancelar</button>\n        </div>\n    ));\n\n\n    const modificarSelectedHimno = (propiedades, valor) => {\n        let selectedHimnoCopy = [...selectedHimno];\n        propiedades.forEach((propiedad, index) => {\n            selectedHimnoCopy[0][propiedad] = valor[index];\n        });\n        setSelectedHimno(selectedHimnoCopy);\n    }\n\n    //Buscar los himnos que coincidan con el texto de busqueda cuando el botón buscar es presionado.\n    const buscarHimno = (event) => {\n        event.preventDefault();\n        modificarSelectedHimno([\"updated\"], [false]);\n        setEstrofas([]);\n        setLoading(true);\n        //Buscar solo en los títulos de los himnos.\n        if(!buscarContenido){\n            if(busqueda.length > 0){\n                fetch('api/buscartitulos?term='+ busqueda, {\n                        method: 'get',\n                        headers: {\n                            'Content-Type': 'application/json',\n                        }\n                    })\n                .then(response => response.json())\n                .then(result => {\n                    setLoading(false);\n                    if(result.length > 1){\n                        refOverlay.current.style.display = \"block\";\n                        setHimnos(result);\n                    } else if(result.length > 0){\n                        desplegarEstrofas(result[0].Id, result[0].Titulo);\n                    } else {\n                        alert(\"No hay coincidencias con su busqueda\");\n                        setLoading(false);\n                    }\n                })\n                .catch((error) => {\n                    console.error(error);\n                    alert(\"¡Error en la conexión!\");\n                    setLoading(false);\n                });\n            } else {\n                alert(\"La busqueda está vacía. Digite algun texto para buscar.\");\n                setLoading(false);\n            }\n        //Buscar en los títulos de los himnos y también en la letra.\n        } else {\n            if(busqueda.length > 0){\n                const estrofasId = new Set();\n                let url = \"\";\n                fetch('/api/buscarenestrofas?term='+ busqueda, {\n                        method: 'get',\n                        headers: {\n                            'Content-Type': 'application/json',\n                        }\n                    })\n                .then(response => response.json())\n                .then(result => {\n                    for(var i=0; i < result.length; i++){\n                        estrofasId.add(result[i].Himno_Id);\n                    }\n                    let idArray = Array.from(estrofasId);\n                    for(i = 0; i < idArray.length; i++){\n                        url+= \"&array[]=\" + idArray[i];\n                    }\n                    fetch('api/buscarencontenido?term='+ busqueda + url, {\n                        method: 'get',\n                        headers: {\n                            'Content-Type': 'application/json',\n                        }\n                    })\n                    .then(response => response.json())\n                    .then(result => {\n                        setLoading(false);\n                        if(result.length > 1){\n                            refOverlay.current.style.display = \"block\";\n                            setHimnos(result);    \n                        } else if(result.length > 0){\n                            desplegarEstrofas(result[0].Id, result[0].Titulo);\n                        } else {\n                            alert(\"No hay coincidencias con su busqueda\");\n                            setLoading(false);\n                        }\n                    })\n                    .catch((error) => {\n                        console.error(error);\n                        alert(\"¡Error en la conexión!\");\n                        setLoading(false);\n                    });\n                })\n                .catch((error) => {\n                    console.error(error);\n                    alert(\"¡Error en la conexión!\");\n                    setLoading(false);\n                });\n            } else {\n                window.alert(\"La busqueda está vacía. Digite algun texto para buscar.\");\n                setLoading(false);\n            }\n        }\n    }\n\n    const checkboxChange = (event) => {\n        let isChecked = event.target.checked;\n        setBuscarContenido(isChecked);\n    }\n\n    const busquedaChange = (event) => {\n        const termino = event.target.value;\n        setBusqueda(termino);\n        if(estrofas.length > 0){\n            modificarSelectedHimno([\"titulo\", \"updated\"], [termino, true]);\n        }\n    }\n\n    const desplegarEstrofas = (selected_id,selected_titulo) => {\n        setLoading(true);\n        refRelleno.current.style.display = \"none\";\n        fetch('api/obtenerestrofas?id='+ selected_id)\n        .then(response => response.json())\n        .then(data => {\n            setEstrofas(data); \n            setLoading(false);\n            modificarSelectedHimno([\"titulo\", \"cantidad\", \"id\"], [selected_titulo, data.length, data[0].Himno_Id]);\n        })\n        .catch(error => console.error(error));\n        setBusqueda(selected_titulo);\n        refOverlay.current.style.display = \"none\";\n    }\n\n    const updateEstrofa = (numero_estrofa, event) => {\n        let estrofasCopy = [...estrofas];\n        let currentEstrofa = event.target.value;\n        estrofasCopy[numero_estrofa - 1].Contenido = currentEstrofa;\n        estrofasCopy[numero_estrofa - 1].updated = true;\n        setEstrofas(estrofasCopy);\n    }\n\n    const borrarEstrofa = (numero) => {\n        if(estrofas.length > 1){\n            let estrofaIndex = numero - 1;\n            console.log(\"estrofa index: \" + estrofaIndex);\n            let estrofasCopy = [...estrofas];\n            estrofasCopy.splice(estrofaIndex, 1);\n\n            estrofasCopy.forEach((estrofa) => {\n                if(estrofa.Numero_estrofa >= estrofaIndex + 1){\n                    estrofa.Numero_estrofa -= 1;\n                    estrofa.updated = true;\n                }\n            });\n            modificarSelectedHimno([\"updated\"], [true]);\n            setEstrofas(estrofasCopy);\n        } else {\n            alert(\"No se puede elminar. Cada himno debe tener mínimo una estrofa.\");\n        }\n        \n    }\n\n    const nuevaDiapositiva = () => {\n        if(selectedHimno[0].id !== 0){\n            let estrofasCopy = [...estrofas];\n            estrofasCopy.push({Himno_Id: estrofasCopy[0].Himno_Id, Numero_estrofa: estrofasCopy.length + 1, Contenido: \"\"});\n            setEstrofas(estrofasCopy);\n        } else {\n            alert(\"No ha seleccionado ningún canto para modificar.\");\n        }\n    }\n\n    const eliminarCanto = async() => {\n        if(selectedHimno[0].cantidad > 0){\n            const confirmed = await confirm();\n            if (confirmed) {\n                console.log(\"El canto ha sido eliminado\");\n                setSelectedHimno([{id: 0, titulo:\"\", cantidad: 0, updated: false}]);\n                setEstrofas([]);\n                setHimnos([{ Id: 0, Titulo: \"\", Cantidad_estrofas: 0, selected: false }]);\n                setBusqueda(\"\");\n                // alert(\"El canto ha sido eliminado.\");\n                refRelleno.current.innerHTML = \"<h1>El canto ha sido eliminado.</h1>\";\n                refRelleno.current.style.display = \"block\";\n            } else {\n                console.log(\"No ha pasado nada\");\n            } \n        } else {\n            alert(\"No hay nada que eliminar. Selecciona un canto antes.\")\n        }\n    }\n\n    const actualizarHimno = () => {\n        console.log(selectedHimno[0].cantidad);\n        if(selectedHimno[0].cantidad > 0){\n            setLoading(true);\n\n            let fetchArray = [];\n            let estrofaData = {};\n            let himnoData = {titulo: selectedHimno[0].titulo, cantidad: estrofas.length, id: estrofas[0].Himno_Id};\n            let borrarCantidad;\n            //Borrar estrofas si es necesario, se borra de la última hacia atras.\n            if(selectedHimno[0].cantidad > estrofas.length){\n                borrarCantidad = selectedHimno[0].cantidad - estrofas.length;\n                for(var i = 0; i < borrarCantidad; i++){\n                    let borrarData = {id: himnoData.id, numero: selectedHimno[0].cantidad - i}\n                    // fetchArray.push(\n                    //     fetch('api/borrarestrofa', {\n                    //         method: 'delete',\n                    //         headers: {\n                    //             'Content-Type': 'application/json',\n                    //         },\n                    //         body: JSON.stringify(borrarData)\n                    //     })\n                    // );\n                    console.log(\"estrofa: \" + borrarData.numero + \" de \" + selectedHimno[0].cantidad + \" ha sido borrada.\");\n                }\n\n                let nuevaCantidad = selectedHimno[0].cantidad - borrarCantidad;\n                modificarSelectedHimno([\"cantidad\"], [nuevaCantidad]);\n            //Insertar nuevas diapositivas\n            } else if(selectedHimno[0].cantidad < estrofas.length){\n                let insertarCantidad =  estrofas.length - selectedHimno[0].cantidad;\n                for(i = 1; i <= insertarCantidad; i++){\n                    let numero_estrofa = selectedHimno[0].cantidad + i;\n                    let insertarData = {id: himnoData.id, numero: numero_estrofa, contenido: estrofas[numero_estrofa - 1].Contenido}\n                    // fetchArray.push(\n                    //     fetch('api/insertarestrofa', {\n                    //         method: 'post',\n                    //         headers: {\n                    //             'Content-Type': 'application/json',\n                    //         },\n                    //         body: JSON.stringify(insertarData)\n                    //     })\n                    // );\n                    console.log(\"La estrofa: \" + insertarData.numero + \" fue agregada. Contenido: \", insertarData.contenido);\n                    let estrofasCopy = [...estrofas];\n                    estrofasCopy[numero_estrofa - 1].updated = false;\n                    setEstrofas(estrofasCopy);\n                }\n\n                let nuevaCantidad = selectedHimno[0].cantidad + insertarCantidad;\n                modificarSelectedHimno([\"cantidad\"], [nuevaCantidad]);\n            }\n            //Actualizar todas las diapositivas que hayan sido actualizadas.\n            if(selectedHimno[0].updated){\n                // fetchArray.push(\n                //     fetch('api/actualizartitulo', {\n                //             method: 'post',\n                //             headers: {\n                //                 'Content-Type': 'application/json',\n                //             },\n                //             body: JSON.stringify(himnoData)\n                //         })\n                // );\n                console.log(\"El himno ha sido actualizado.\", himnoData);\n                modificarSelectedHimno([\"updated\"], [false]);\n            } else {\n                console.log(\"El himno NO ha sido actualizado\");\n            }\n\n            let estrofasCopy = [...estrofas];\n            estrofasCopy.forEach(estrofa => {\n                if(estrofa.updated){\n                    estrofaData = {id: estrofa.Himno_Id, numero: estrofa.Numero_estrofa, contenido: estrofa.Contenido}\n                    // fetchArray.push(\n                    //     fetch('api/actualizarestrofa', {\n                    //             method: 'post',\n                    //             headers: {\n                    //                 'Content-Type': 'application/json',\n                    //             },\n                    //             body: JSON.stringify(estrofaData)\n                    //         })\n                    // );\n                    console.log(\"La estrofa: \" + estrofaData.numero + \" ha sido actualizada.\");\n                    estrofa.updated = false;\n                } else {\n                    console.log(\"La estrofa:\" + estrofa.Numero_estrofa + \" NO ha sido actualizado\");\n                }\n\n            });\n            \n            // Promise.all(fetchArray)\n            // .then(() => {\n            //     alert(\"El canto ha sido actualizado.\");\n            //     setLoading(false);\n            // })\n            // .catch((error) => {\n            //     console.error(error);\n            //     setLoading(false);\n            // });\n\n            //let estrofasData = {id: estrofas[0].Himno_Id}\n            // console.log(data);\n            // const fetchData = async () => {\n            //     const result = await fetch('api/actualizartitulo', {\n            //         method: 'post',\n            //         headers: {\n            //             'Content-Type': 'application/json',\n            //         },\n            //         body: JSON.stringify(data)\n            //     });\n            //     const body = await result.json();\n            //     setHimnos(body);\n                setLoading(false);\n            // }\n            // fetchData();\n        } else {\n            alert(\"No hay nada que guardar.\");\n        }\n        \n    }\n\n    const cerrarOverlay = () => {\n        refOverlay.current.style.display = \"none\";\n    }\n\n    return(\n        <React.Fragment>\n            <main id=\"modificarContainer\" className=\"mainContainer\">\n                <header className=\"two-columns\">\n                <div className=\"header-container\">\n                        <div className=\"header-left\">\n                        </div>\n                        <div className=\"header-right\">\n                            <img id=\"edit-image\" className=\"image-header\" src={edit_image} alt=\"\" />\n                        </div>  \n                    </div>  \n                    <div className=\"mas-abajo\" onClick={() => {refColumns.current.scrollIntoView({behavior: 'smooth'}); }}></div>\n                </header>\n                <div className=\"linea-divisoria\"></div>\n                <div className=\"columnsContainer\" ref={refColumns}>\n                    <div className=\"column column1\">\n                        <section>\n                            <form onSubmit={buscarHimno}>\n                                <div className=\"titulo-modificar\">\n                                    <h2>Título:</h2>\n                                    <div className=\"buscar-container\">\n                                        <input type=\"text\" name=\"search\" placeholder=\"Buscar Canto\" value={busqueda} onChange={busquedaChange}/>\n                                    </div>\n                                </div>\n                                <button type=\"submit\">Buscar</button>\n                                <label>\n                                Buscar en contenido <input type=\"checkbox\" onChange={checkboxChange}/>\n                                </label>\n                            </form>\n                        </section>\n                    </div>\n                    <div className=\"column column2\">\n                        <section>\n                            <h2 className=\"cantidad-header\">Cantidad de estrofas:</h2>\n                            <div className=\"numero\">{estrofas.length}</div>\n                            <div id=\"modify-icons\">\n                            <div className=\"guardar-container\" onClick={nuevaDiapositiva}>\n                                    <i className=\"icono-nueva\"></i>\n                                    Nueva Diapositiva\n                                </div>\n                                <div className=\"guardar-container\" onClick={actualizarHimno}>\n                                    <i className=\"icono-salvar\"></i>\n                                    Guardar Cambios\n                                </div>\n                                <div className=\"guardar-container\" onClick={eliminarCanto}>\n                                    <i className=\"icono-eliminar\"></i>\n                                    Eliminar Canto\n                                </div>\n                            </div>\n                        </section>\n                    </div>\n                    \n                </div>\n            <div className=\"overlay\" ref={refOverlay}>\n                <BusquedaLista ref={refBusquedaRes} himnos={himnos} desplegarEstrofas={desplegarEstrofas} cerrarOverlay={cerrarOverlay}/>\n            </div>\n            <EstrofasModificables estrofas={estrofas} updateEstrofa={updateEstrofa} borrarEstrofa={borrarEstrofa}/>\n            <div ref={refRelleno} className=\"relleno\"><h1>Escoja el canto que desea modificar.</h1></div>\n            </main>\n            <Loader className={\"loader\" + (loading?\" visible\":\"\")}  type=\"ThreeDots\" color=\"#80B041\" height={80} width={80} />\n        </React.Fragment>   \n    )\n    \n};\n\nexport default ModificarPage;","import React from 'react';\n\nconst NotFoundPage = () => (\n    <h1>404: La página no se encuentra.</h1>\n);\n\nexport default NotFoundPage;","import {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n} from 'react-router-dom';\nimport TopNav from './TopNav';\nimport Footer from './Footer';\nimport './App.css';\nimport HomePage from './pages/HomePage';\nimport CrearPage from './pages/CrearPage';\nimport AgregarPage from './pages/AgregarPage';\nimport ModificarPage from './pages/ModificarPage';\nimport NotFoundPage from './pages/NotFoundPage';\nimport { PopupProvider } from 'react-hook-popup';\n\nfunction App() {\n  return (\n    <Router>\n      <PopupProvider>\n        <div className=\"App\">\n          <TopNav />\n          <div id=\"page-body\">\n            <Switch>\n              <Route path=\"/\" component={HomePage} exact />\n              <Route path=\"/crear\" component={CrearPage} />\n              <Route path=\"/agregar\" component={AgregarPage} />\n              <Route path=\"/modificar\" component={ModificarPage} />\n              <Route component={NotFoundPage} />\n            </Switch>\n          </div>\n          <Footer/>\n        </div>\n      </PopupProvider>\n      \n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'whatwg-fetch';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}